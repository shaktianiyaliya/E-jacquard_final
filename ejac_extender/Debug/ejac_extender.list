
ejac_extender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002380  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08002544  08002544  00012544  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002c4  20000000  08002658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ea8  200002c4  0800291c  000202c4  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000116c  0800291c  0002116c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a137  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000017d3  00000000  00000000  0002a42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003888  00000000  00000000  0002bbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000770  00000000  00000000  0002f488  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f0  00000000  00000000  0002fbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000302d  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002e47  00000000  00000000  00033315  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003615c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012f8  00000000  00000000  000361d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200002c4 	.word	0x200002c4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800252c 	.word	0x0800252c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200002c8 	.word	0x200002c8
 8000200:	0800252c 	.word	0x0800252c

08000204 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000204:	7983      	ldrb	r3, [r0, #6]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d036      	beq.n	8000278 <EXTI_Init+0x74>
{
 800020a:	b410      	push	{r4}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800020c:	4b20      	ldr	r3, [pc, #128]	; (8000290 <EXTI_Init+0x8c>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	6801      	ldr	r1, [r0, #0]
 8000212:	ea22 0201 	bic.w	r2, r2, r1
 8000216:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000218:	685a      	ldr	r2, [r3, #4]
 800021a:	6801      	ldr	r1, [r0, #0]
 800021c:	ea22 0201 	bic.w	r2, r2, r1
 8000220:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000222:	7902      	ldrb	r2, [r0, #4]
 8000224:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000228:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800022c:	6811      	ldr	r1, [r2, #0]
 800022e:	6804      	ldr	r4, [r0, #0]
 8000230:	4321      	orrs	r1, r4
 8000232:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000234:	689a      	ldr	r2, [r3, #8]
 8000236:	6801      	ldr	r1, [r0, #0]
 8000238:	ea22 0201 	bic.w	r2, r2, r1
 800023c:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800023e:	68da      	ldr	r2, [r3, #12]
 8000240:	6801      	ldr	r1, [r0, #0]
 8000242:	ea22 0201 	bic.w	r2, r2, r1
 8000246:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000248:	7943      	ldrb	r3, [r0, #5]
 800024a:	2b10      	cmp	r3, #16
 800024c:	d00a      	beq.n	8000264 <EXTI_Init+0x60>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800024e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000252:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	6801      	ldr	r1, [r0, #0]
 800025a:	430a      	orrs	r2, r1
 800025c:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800025e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000262:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <EXTI_Init+0x8c>)
 8000266:	689a      	ldr	r2, [r3, #8]
 8000268:	6801      	ldr	r1, [r0, #0]
 800026a:	430a      	orrs	r2, r1
 800026c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800026e:	68da      	ldr	r2, [r3, #12]
 8000270:	6801      	ldr	r1, [r0, #0]
 8000272:	430a      	orrs	r2, r1
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	e7f2      	b.n	800025e <EXTI_Init+0x5a>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000278:	7903      	ldrb	r3, [r0, #4]
 800027a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800027e:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	6801      	ldr	r1, [r0, #0]
 8000286:	ea22 0201 	bic.w	r2, r2, r1
 800028a:	601a      	str	r2, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40013c00 	.word	0x40013c00

08000294 <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <EXTI_GetITStatus+0x10>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4203      	tst	r3, r0
 800029a:	d101      	bne.n	80002a0 <EXTI_GetITStatus+0xc>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800029c:	2000      	movs	r0, #0
  }
  return bitstatus;
  
}
 800029e:	4770      	bx	lr
    bitstatus = SET;
 80002a0:	2001      	movs	r0, #1
 80002a2:	4770      	bx	lr
 80002a4:	40013c00 	.word	0x40013c00

080002a8 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <EXTI_ClearITPendingBit+0x8>)
 80002aa:	6158      	str	r0, [r3, #20]
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40013c00 	.word	0x40013c00

080002b4 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <FLASH_Unlock+0x18>)
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db00      	blt.n	80002be <FLASH_Unlock+0xa>
 80002bc:	4770      	bx	lr
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <FLASH_Unlock+0x18>)
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <FLASH_Unlock+0x1c>)
 80002c2:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80002c4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80002c8:	605a      	str	r2, [r3, #4]
  }  
}
 80002ca:	e7f7      	b.n	80002bc <FLASH_Unlock+0x8>
 80002cc:	40023c00 	.word	0x40023c00
 80002d0:	45670123 	.word	0x45670123

080002d4 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80002d4:	4a02      	ldr	r2, [pc, #8]	; (80002e0 <FLASH_Lock+0xc>)
 80002d6:	6913      	ldr	r3, [r2, #16]
 80002d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002dc:	6113      	str	r3, [r2, #16]
 80002de:	4770      	bx	lr
 80002e0:	40023c00 	.word	0x40023c00

080002e4 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80002e4:	4b01      	ldr	r3, [pc, #4]	; (80002ec <FLASH_ClearFlag+0x8>)
 80002e6:	60d8      	str	r0, [r3, #12]
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40023c00 	.word	0x40023c00

080002f0 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <FLASH_GetStatus+0x4c>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80002f8:	d11b      	bne.n	8000332 <FLASH_GetStatus+0x42>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <FLASH_GetStatus+0x4c>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	f013 0f10 	tst.w	r3, #16
 8000302:	d001      	beq.n	8000308 <FLASH_GetStatus+0x18>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8000304:	2006      	movs	r0, #6
 8000306:	4770      	bx	lr
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <FLASH_GetStatus+0x4c>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000310:	d001      	beq.n	8000316 <FLASH_GetStatus+0x26>
      { 
        flashstatus = FLASH_ERROR_RD;
 8000312:	2002      	movs	r0, #2
 8000314:	4770      	bx	lr
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <FLASH_GetStatus+0x4c>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800031e:	d001      	beq.n	8000324 <FLASH_GetStatus+0x34>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 8000320:	2007      	movs	r0, #7
 8000322:	4770      	bx	lr
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <FLASH_GetStatus+0x4c>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	f013 0f02 	tst.w	r3, #2
 800032c:	d003      	beq.n	8000336 <FLASH_GetStatus+0x46>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 800032e:	2008      	movs	r0, #8
 8000330:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 8000332:	2001      	movs	r0, #1
 8000334:	4770      	bx	lr
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 8000336:	2009      	movs	r0, #9
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40023c00 	.word	0x40023c00

08000340 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8000340:	b500      	push	{lr}
 8000342:	b083      	sub	sp, #12
  __IO FLASH_Status status = FLASH_COMPLETE;
 8000344:	2309      	movs	r3, #9
 8000346:	f88d 3007 	strb.w	r3, [sp, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800034a:	f7ff ffd1 	bl	80002f0 <FLASH_GetStatus>
 800034e:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8000352:	e003      	b.n	800035c <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8000354:	f7ff ffcc 	bl	80002f0 <FLASH_GetStatus>
 8000358:	f88d 0007 	strb.w	r0, [sp, #7]
  while(status == FLASH_BUSY)
 800035c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b01      	cmp	r3, #1
 8000364:	d0f6      	beq.n	8000354 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 8000366:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800036a:	b003      	add	sp, #12
 800036c:	f85d fb04 	ldr.w	pc, [sp], #4

08000370 <FLASH_EraseSector>:
{
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4606      	mov	r6, r0
  if(VoltageRange == VoltageRange_1)
 8000374:	b149      	cbz	r1, 800038a <FLASH_EraseSector+0x1a>
  else if(VoltageRange == VoltageRange_2)
 8000376:	2901      	cmp	r1, #1
 8000378:	d00d      	beq.n	8000396 <FLASH_EraseSector+0x26>
  else if(VoltageRange == VoltageRange_3)
 800037a:	2902      	cmp	r1, #2
 800037c:	d002      	beq.n	8000384 <FLASH_EraseSector+0x14>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800037e:	f44f 7540 	mov.w	r5, #768	; 0x300
 8000382:	e003      	b.n	800038c <FLASH_EraseSector+0x1c>
    tmp_psize = FLASH_PSIZE_WORD;
 8000384:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000388:	e000      	b.n	800038c <FLASH_EraseSector+0x1c>
     tmp_psize = FLASH_PSIZE_BYTE;
 800038a:	2500      	movs	r5, #0
  status = FLASH_WaitForLastOperation();
 800038c:	f7ff ffd8 	bl	8000340 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000390:	2809      	cmp	r0, #9
 8000392:	d003      	beq.n	800039c <FLASH_EraseSector+0x2c>
}
 8000394:	bd70      	pop	{r4, r5, r6, pc}
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000396:	f44f 7580 	mov.w	r5, #256	; 0x100
 800039a:	e7f7      	b.n	800038c <FLASH_EraseSector+0x1c>
    FLASH->CR &= CR_PSIZE_MASK;
 800039c:	4c0f      	ldr	r4, [pc, #60]	; (80003dc <FLASH_EraseSector+0x6c>)
 800039e:	6923      	ldr	r3, [r4, #16]
 80003a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003a4:	6123      	str	r3, [r4, #16]
    FLASH->CR |= tmp_psize;
 80003a6:	6923      	ldr	r3, [r4, #16]
 80003a8:	431d      	orrs	r5, r3
 80003aa:	6125      	str	r5, [r4, #16]
    FLASH->CR &= SECTOR_MASK;
 80003ac:	6923      	ldr	r3, [r4, #16]
 80003ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80003b2:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80003b4:	6923      	ldr	r3, [r4, #16]
 80003b6:	431e      	orrs	r6, r3
 80003b8:	f046 0602 	orr.w	r6, r6, #2
 80003bc:	6126      	str	r6, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80003be:	6923      	ldr	r3, [r4, #16]
 80003c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003c4:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation();
 80003c6:	f7ff ffbb 	bl	8000340 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_SER);
 80003ca:	6923      	ldr	r3, [r4, #16]
 80003cc:	f023 0302 	bic.w	r3, r3, #2
 80003d0:	6123      	str	r3, [r4, #16]
    FLASH->CR &= SECTOR_MASK; 
 80003d2:	6923      	ldr	r3, [r4, #16]
 80003d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80003d8:	6123      	str	r3, [r4, #16]
 80003da:	e7db      	b.n	8000394 <FLASH_EraseSector+0x24>
 80003dc:	40023c00 	.word	0x40023c00

080003e0 <FLASH_ProgramByte>:
{
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4605      	mov	r5, r0
 80003e4:	460e      	mov	r6, r1
  status = FLASH_WaitForLastOperation();
 80003e6:	f7ff ffab 	bl	8000340 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 80003ea:	2809      	cmp	r0, #9
 80003ec:	d000      	beq.n	80003f0 <FLASH_ProgramByte+0x10>
}
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
    FLASH->CR &= CR_PSIZE_MASK;
 80003f0:	4c09      	ldr	r4, [pc, #36]	; (8000418 <FLASH_ProgramByte+0x38>)
 80003f2:	6923      	ldr	r3, [r4, #16]
 80003f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003f8:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 80003fa:	6923      	ldr	r3, [r4, #16]
 80003fc:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 80003fe:	6923      	ldr	r3, [r4, #16]
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6123      	str	r3, [r4, #16]
    *(__IO uint8_t*)Address = Data;
 8000406:	702e      	strb	r6, [r5, #0]
    status = FLASH_WaitForLastOperation();
 8000408:	f7ff ff9a 	bl	8000340 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800040c:	6923      	ldr	r3, [r4, #16]
 800040e:	f023 0301 	bic.w	r3, r3, #1
 8000412:	6123      	str	r3, [r4, #16]
 8000414:	e7eb      	b.n	80003ee <FLASH_ProgramByte+0xe>
 8000416:	bf00      	nop
 8000418:	40023c00 	.word	0x40023c00

0800041c <GPIO_Init>:
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800041c:	2300      	movs	r3, #0
 800041e:	2b0f      	cmp	r3, #15
 8000420:	d840      	bhi.n	80004a4 <GPIO_Init+0x88>
{
 8000422:	b4f0      	push	{r4, r5, r6, r7}
 8000424:	e025      	b.n	8000472 <GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000426:	6884      	ldr	r4, [r0, #8]
 8000428:	4022      	ands	r2, r4
 800042a:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800042c:	6882      	ldr	r2, [r0, #8]
 800042e:	794c      	ldrb	r4, [r1, #5]
 8000430:	40ac      	lsls	r4, r5
 8000432:	4322      	orrs	r2, r4
 8000434:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000436:	6844      	ldr	r4, [r0, #4]
 8000438:	b29f      	uxth	r7, r3
 800043a:	2601      	movs	r6, #1
 800043c:	40be      	lsls	r6, r7
 800043e:	ea24 0406 	bic.w	r4, r4, r6
 8000442:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000444:	6844      	ldr	r4, [r0, #4]
 8000446:	798a      	ldrb	r2, [r1, #6]
 8000448:	40ba      	lsls	r2, r7
 800044a:	b292      	uxth	r2, r2
 800044c:	4322      	orrs	r2, r4
 800044e:	6042      	str	r2, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000450:	68c2      	ldr	r2, [r0, #12]
 8000452:	b29c      	uxth	r4, r3
 8000454:	0066      	lsls	r6, r4, #1
 8000456:	2403      	movs	r4, #3
 8000458:	40b4      	lsls	r4, r6
 800045a:	ea22 0204 	bic.w	r2, r2, r4
 800045e:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000460:	68c2      	ldr	r2, [r0, #12]
 8000462:	79cc      	ldrb	r4, [r1, #7]
 8000464:	fa04 f505 	lsl.w	r5, r4, r5
 8000468:	4315      	orrs	r5, r2
 800046a:	60c5      	str	r5, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800046c:	3301      	adds	r3, #1
 800046e:	2b0f      	cmp	r3, #15
 8000470:	d816      	bhi.n	80004a0 <GPIO_Init+0x84>
    pos = ((uint32_t)0x01) << pinpos;
 8000472:	2201      	movs	r2, #1
 8000474:	409a      	lsls	r2, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000476:	680c      	ldr	r4, [r1, #0]
    if (currentpin == pos)
 8000478:	43a2      	bics	r2, r4
 800047a:	d1f7      	bne.n	800046c <GPIO_Init+0x50>
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800047c:	6804      	ldr	r4, [r0, #0]
 800047e:	005d      	lsls	r5, r3, #1
 8000480:	2203      	movs	r2, #3
 8000482:	40aa      	lsls	r2, r5
 8000484:	43d2      	mvns	r2, r2
 8000486:	4014      	ands	r4, r2
 8000488:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800048a:	6804      	ldr	r4, [r0, #0]
 800048c:	790e      	ldrb	r6, [r1, #4]
 800048e:	40ae      	lsls	r6, r5
 8000490:	4334      	orrs	r4, r6
 8000492:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000494:	790c      	ldrb	r4, [r1, #4]
 8000496:	3c01      	subs	r4, #1
 8000498:	b2e4      	uxtb	r4, r4
 800049a:	2c01      	cmp	r4, #1
 800049c:	d8d8      	bhi.n	8000450 <GPIO_Init+0x34>
 800049e:	e7c2      	b.n	8000426 <GPIO_Init+0xa>
    }
  }
}
 80004a0:	bcf0      	pop	{r4, r5, r6, r7}
 80004a2:	4770      	bx	lr
 80004a4:	4770      	bx	lr

080004a6 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80004a6:	8301      	strh	r1, [r0, #24]
 80004a8:	4770      	bx	lr

080004aa <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80004aa:	8341      	strh	r1, [r0, #26]
 80004ac:	4770      	bx	lr

080004ae <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80004ae:	b90a      	cbnz	r2, 80004b4 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80004b0:	8341      	strh	r1, [r0, #26]
 80004b2:	4770      	bx	lr
    GPIOx->BSRRL = GPIO_Pin;
 80004b4:	8301      	strh	r1, [r0, #24]
 80004b6:	4770      	bx	lr

080004b8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004b8:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004ba:	f001 0307 	and.w	r3, r1, #7
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004c2:	08c9      	lsrs	r1, r1, #3
 80004c4:	3108      	adds	r1, #8
 80004c6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 80004ca:	250f      	movs	r5, #15
 80004cc:	fa05 f303 	lsl.w	r3, r5, r3
 80004d0:	ea24 0303 	bic.w	r3, r4, r3
 80004d4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004d8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80004dc:	431a      	orrs	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004de:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
 80004e2:	bc30      	pop	{r4, r5}
 80004e4:	4770      	bx	lr
	...

080004e8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004e8:	b410      	push	{r4}
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004ea:	4b3e      	ldr	r3, [pc, #248]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 80004f2:	2b0c      	cmp	r3, #12
 80004f4:	d873      	bhi.n	80005de <RCC_GetClocksFreq+0xf6>
 80004f6:	e8df f003 	tbb	[pc, r3]
 80004fa:	7207      	.short	0x7207
 80004fc:	72257272 	.word	0x72257272
 8000500:	72287272 	.word	0x72287272
 8000504:	7272      	.short	0x7272
 8000506:	4d          	.byte	0x4d
 8000507:	00          	.byte	0x00
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000508:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <RCC_GetClocksFreq+0x100>)
 800050a:	6003      	str	r3, [r0, #0]
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800050c:	4c35      	ldr	r4, [pc, #212]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 800050e:	68a3      	ldr	r3, [r4, #8]
  tmp = tmp >> 4;
 8000510:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000514:	4935      	ldr	r1, [pc, #212]	; (80005ec <RCC_GetClocksFreq+0x104>)
 8000516:	5ccb      	ldrb	r3, [r1, r3]
 8000518:	b2da      	uxtb	r2, r3
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800051a:	6803      	ldr	r3, [r0, #0]
 800051c:	40d3      	lsrs	r3, r2
 800051e:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000520:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 10;
 8000522:	f3c2 2282 	ubfx	r2, r2, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000526:	5c8a      	ldrb	r2, [r1, r2]
 8000528:	b2d2      	uxtb	r2, r2
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800052a:	fa23 f202 	lsr.w	r2, r3, r2
 800052e:	6082      	str	r2, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000530:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 13;
 8000532:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000536:	5c8a      	ldrb	r2, [r1, r2]
 8000538:	b2d2      	uxtb	r2, r2
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800053a:	40d3      	lsrs	r3, r2
 800053c:	60c3      	str	r3, [r0, #12]
}
 800053e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000542:	4770      	bx	lr
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <RCC_GetClocksFreq+0x108>)
 8000546:	6003      	str	r3, [r0, #0]
    break;
 8000548:	e7e0      	b.n	800050c <RCC_GetClocksFreq+0x24>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 800054c:	685a      	ldr	r2, [r3, #4]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if (pllsource != 0)
 8000554:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000558:	d012      	beq.n	8000580 <RCC_GetClocksFreq+0x98>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800055a:	4a25      	ldr	r2, [pc, #148]	; (80005f0 <RCC_GetClocksFreq+0x108>)
 800055c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000568:	fb03 f302 	mul.w	r3, r3, r2
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 800056e:	6852      	ldr	r2, [r2, #4]
 8000570:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8000574:	3201      	adds	r2, #1
 8000576:	0052      	lsls	r2, r2, #1
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000578:	fbb3 f3f2 	udiv	r3, r3, r2
 800057c:	6003      	str	r3, [r0, #0]
    break;
 800057e:	e7c5      	b.n	800050c <RCC_GetClocksFreq+0x24>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000580:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <RCC_GetClocksFreq+0x100>)
 8000582:	fbb2 f2f3 	udiv	r2, r2, r3
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800058e:	fb03 f302 	mul.w	r3, r3, r2
 8000592:	e7eb      	b.n	800056c <RCC_GetClocksFreq+0x84>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 8000596:	685a      	ldr	r2, [r3, #4]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if (pllsource != 0)
 800059e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80005a2:	d012      	beq.n	80005ca <RCC_GetClocksFreq+0xe2>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <RCC_GetClocksFreq+0x108>)
 80005a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80005b2:	fb03 f302 	mul.w	r3, r3, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 80005b8:	6852      	ldr	r2, [r2, #4]
 80005ba:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80005be:	3201      	adds	r2, #1
 80005c0:	0052      	lsls	r2, r2, #1
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 80005c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80005c6:	6003      	str	r3, [r0, #0]
    break;
 80005c8:	e7a0      	b.n	800050c <RCC_GetClocksFreq+0x24>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <RCC_GetClocksFreq+0x100>)
 80005cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <RCC_GetClocksFreq+0xfc>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80005d8:	fb03 f302 	mul.w	r3, r3, r2
 80005dc:	e7eb      	b.n	80005b6 <RCC_GetClocksFreq+0xce>
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005de:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <RCC_GetClocksFreq+0x100>)
 80005e0:	6003      	str	r3, [r0, #0]
    break;
 80005e2:	e793      	b.n	800050c <RCC_GetClocksFreq+0x24>
 80005e4:	40023800 	.word	0x40023800
 80005e8:	00f42400 	.word	0x00f42400
 80005ec:	20000000 	.word	0x20000000
 80005f0:	007a1200 	.word	0x007a1200

080005f4 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005f4:	b929      	cbnz	r1, 8000602 <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <RCC_AHB1PeriphClockCmd+0x18>)
 80005f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80005fa:	ea23 0000 	bic.w	r0, r3, r0
 80005fe:	6310      	str	r0, [r2, #48]	; 0x30
 8000600:	4770      	bx	lr
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000602:	4a02      	ldr	r2, [pc, #8]	; (800060c <RCC_AHB1PeriphClockCmd+0x18>)
 8000604:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000606:	4318      	orrs	r0, r3
 8000608:	6310      	str	r0, [r2, #48]	; 0x30
 800060a:	4770      	bx	lr
 800060c:	40023800 	.word	0x40023800

08000610 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000610:	b929      	cbnz	r1, 800061e <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <RCC_APB2PeriphClockCmd+0x18>)
 8000614:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000616:	ea23 0000 	bic.w	r0, r3, r0
 800061a:	6450      	str	r0, [r2, #68]	; 0x44
 800061c:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 800061e:	4a02      	ldr	r2, [pc, #8]	; (8000628 <RCC_APB2PeriphClockCmd+0x18>)
 8000620:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000622:	4318      	orrs	r0, r3
 8000624:	6450      	str	r0, [r2, #68]	; 0x44
 8000626:	4770      	bx	lr
 8000628:	40023800 	.word	0x40023800

0800062c <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800062c:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800062e:	f001 0303 	and.w	r3, r1, #3
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	240f      	movs	r4, #15
 8000636:	fa04 f503 	lsl.w	r5, r4, r3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800063a:	0889      	lsrs	r1, r1, #2
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <SYSCFG_EXTILineConfig+0x30>)
 800063e:	3102      	adds	r1, #2
 8000640:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8000644:	ea24 0405 	bic.w	r4, r4, r5
 8000648:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800064c:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8000650:	4098      	lsls	r0, r3
 8000652:	4320      	orrs	r0, r4
 8000654:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
}
 8000658:	bc30      	pop	{r4, r5}
 800065a:	4770      	bx	lr
 800065c:	40013800 	.word	0x40013800

08000660 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000660:	b530      	push	{r4, r5, lr}
 8000662:	b085      	sub	sp, #20
 8000664:	4604      	mov	r4, r0
 8000666:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000668:	8a03      	ldrh	r3, [r0, #16]
 800066a:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800066c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000670:	88ca      	ldrh	r2, [r1, #6]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000672:	4313      	orrs	r3, r2
 8000674:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000676:	8983      	ldrh	r3, [r0, #12]
 8000678:	b29b      	uxth	r3, r3

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800067a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800067e:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000682:	8889      	ldrh	r1, [r1, #4]
 8000684:	8928      	ldrh	r0, [r5, #8]
            USART_InitStruct->USART_Mode;
 8000686:	896a      	ldrh	r2, [r5, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000688:	4301      	orrs	r1, r0
 800068a:	430a      	orrs	r2, r1

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800068c:	4313      	orrs	r3, r2
 800068e:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000690:	8aa3      	ldrh	r3, [r4, #20]
 8000692:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000694:	f423 7340 	bic.w	r3, r3, #768	; 0x300

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000698:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800069a:	4313      	orrs	r3, r2
 800069c:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800069e:	4668      	mov	r0, sp
 80006a0:	f7ff ff22 	bl	80004e8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <USART_Init+0xc8>)
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d028      	beq.n	80006fc <USART_Init+0x9c>
 80006aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006ae:	429c      	cmp	r4, r3
 80006b0:	d024      	beq.n	80006fc <USART_Init+0x9c>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80006b2:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80006b4:	89a2      	ldrh	r2, [r4, #12]
 80006b6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80006ba:	d121      	bne.n	8000700 <USART_Init+0xa0>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80006bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006c4:	6829      	ldr	r1, [r5, #0]
 80006c6:	0089      	lsls	r1, r1, #2
 80006c8:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <USART_Init+0xcc>)
 80006ce:	fba3 2301 	umull	r2, r3, r3, r1
 80006d2:	0958      	lsrs	r0, r3, #5
 80006d4:	0105      	lsls	r5, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	fb00 1313 	mls	r3, r0, r3, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80006dc:	89a2      	ldrh	r2, [r4, #12]
 80006de:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80006e2:	d116      	bne.n	8000712 <USART_Init+0xb2>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	3332      	adds	r3, #50	; 0x32
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <USART_Init+0xcc>)
 80006ea:	fba2 2303 	umull	r2, r3, r2, r3
 80006ee:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80006f2:	432b      	orrs	r3, r5
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	8123      	strh	r3, [r4, #8]
}
 80006f8:	b005      	add	sp, #20
 80006fa:	bd30      	pop	{r4, r5, pc}
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80006fc:	9b03      	ldr	r3, [sp, #12]
 80006fe:	e7d9      	b.n	80006b4 <USART_Init+0x54>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000704:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000708:	6829      	ldr	r1, [r5, #0]
 800070a:	0049      	lsls	r1, r1, #1
 800070c:	fbb3 f1f1 	udiv	r1, r3, r1
 8000710:	e7dc      	b.n	80006cc <USART_Init+0x6c>
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000712:	00d9      	lsls	r1, r3, #3
 8000714:	3132      	adds	r1, #50	; 0x32
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <USART_Init+0xcc>)
 8000718:	fba2 3101 	umull	r3, r1, r2, r1
 800071c:	f3c1 1242 	ubfx	r2, r1, #5, #3
 8000720:	ea45 0302 	orr.w	r3, r5, r2
 8000724:	e7e6      	b.n	80006f4 <USART_Init+0x94>
 8000726:	bf00      	nop
 8000728:	40011000 	.word	0x40011000
 800072c:	51eb851f 	.word	0x51eb851f

08000730 <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000730:	b931      	cbnz	r1, 8000740 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000732:	8983      	ldrh	r3, [r0, #12]
 8000734:	b29b      	uxth	r3, r3
 8000736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800073a:	b29b      	uxth	r3, r3
 800073c:	8183      	strh	r3, [r0, #12]
 800073e:	4770      	bx	lr
    USARTx->CR1 |= USART_CR1_UE;
 8000740:	8983      	ldrh	r3, [r0, #12]
 8000742:	b29b      	uxth	r3, r3
 8000744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000748:	8183      	strh	r3, [r0, #12]
 800074a:	4770      	bx	lr

0800074c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800074c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000750:	8081      	strh	r1, [r0, #4]
 8000752:	4770      	bx	lr

08000754 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000754:	8880      	ldrh	r0, [r0, #4]
}
 8000756:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800075a:	4770      	bx	lr

0800075c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800075c:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800075e:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000762:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8000766:	2301      	movs	r3, #1
 8000768:	fa03 f101 	lsl.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800076c:	429c      	cmp	r4, r3
 800076e:	d00a      	beq.n	8000786 <USART_ITConfig+0x2a>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000770:	2c02      	cmp	r4, #2
 8000772:	d00a      	beq.n	800078a <USART_ITConfig+0x2e>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000774:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8000776:	b952      	cbnz	r2, 800078e <USART_ITConfig+0x32>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000778:	6803      	ldr	r3, [r0, #0]
 800077a:	ea23 0101 	bic.w	r1, r3, r1
 800077e:	6001      	str	r1, [r0, #0]
  }
}
 8000780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000784:	4770      	bx	lr
    usartxbase += 0x0C;
 8000786:	300c      	adds	r0, #12
 8000788:	e7f5      	b.n	8000776 <USART_ITConfig+0x1a>
    usartxbase += 0x10;
 800078a:	3010      	adds	r0, #16
 800078c:	e7f3      	b.n	8000776 <USART_ITConfig+0x1a>
    *(__IO uint32_t*)usartxbase  |= itmask;
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	4319      	orrs	r1, r3
 8000792:	6001      	str	r1, [r0, #0]
 8000794:	e7f4      	b.n	8000780 <USART_ITConfig+0x24>

08000796 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000796:	8803      	ldrh	r3, [r0, #0]
 8000798:	4219      	tst	r1, r3
 800079a:	d101      	bne.n	80007a0 <USART_GetFlagStatus+0xa>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800079c:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800079e:	4770      	bx	lr
    bitstatus = SET;
 80007a0:	2001      	movs	r0, #1
 80007a2:	4770      	bx	lr

080007a4 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80007a4:	43c9      	mvns	r1, r1
 80007a6:	b289      	uxth	r1, r1
 80007a8:	8001      	strh	r1, [r0, #0]
 80007aa:	4770      	bx	lr

080007ac <disable_sensors>:
	unsigned int i = 0;
	while (i++ < loops * 1000);
}

void disable_sensors(void)
{
 80007ac:	b508      	push	{r3, lr}
	if(EXTI_GetITStatus(EXTI_Line0) == SET)
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fd70 	bl	8000294 <EXTI_GetITStatus>
 80007b4:	2801      	cmp	r0, #1
 80007b6:	d00c      	beq.n	80007d2 <disable_sensors+0x26>
	{
		EXTI_ClearITPendingBit(EXTI_Line0);
	}

	if(EXTI_GetITStatus(EXTI_Line1) == SET)
 80007b8:	2002      	movs	r0, #2
 80007ba:	f7ff fd6b 	bl	8000294 <EXTI_GetITStatus>
 80007be:	2801      	cmp	r0, #1
 80007c0:	d00a      	beq.n	80007d8 <disable_sensors+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <disable_sensors+0x34>)
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80007d0:	bd08      	pop	{r3, pc}
		EXTI_ClearITPendingBit(EXTI_Line0);
 80007d2:	f7ff fd69 	bl	80002a8 <EXTI_ClearITPendingBit>
 80007d6:	e7ef      	b.n	80007b8 <disable_sensors+0xc>
	{
		EXTI_ClearITPendingBit(EXTI_Line1);
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fd65 	bl	80002a8 <EXTI_ClearITPendingBit>
 80007de:	e7f0      	b.n	80007c2 <disable_sensors+0x16>
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <extender_init>:
}



void extender_init(void)
{
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	b08b      	sub	sp, #44	; 0x2c
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80007e8:	2101      	movs	r1, #1
 80007ea:	4608      	mov	r0, r1
 80007ec:	f7ff ff02 	bl	80005f4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIOA_InitStruct;
	GPIOA_InitStruct.GPIO_Pin = SDATA_PIN | SCLOCK_PIN | OE_PIN | GPIO_Pin_8 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6;
 80007f0:	f641 13ff 	movw	r3, #6655	; 0x19ff
 80007f4:	9308      	str	r3, [sp, #32]
	GPIOA_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80007f6:	2401      	movs	r4, #1
 80007f8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	GPIOA_InitStruct.GPIO_OType = GPIO_OType_PP;
 80007fc:	2500      	movs	r5, #0
 80007fe:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
	GPIOA_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000802:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
	GPIOA_InitStruct.GPIO_Speed = GPIO_Fast_Speed;
 8000806:	2602      	movs	r6, #2
 8000808:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
	GPIO_Init(GPIOA, &GPIOA_InitStruct);
 800080c:	a908      	add	r1, sp, #32
 800080e:	482e      	ldr	r0, [pc, #184]	; (80008c8 <extender_init+0xe4>)
 8000810:	f7ff fe04 	bl	800041c <GPIO_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000814:	4621      	mov	r1, r4
 8000816:	4630      	mov	r0, r6
 8000818:	f7ff feec 	bl	80005f4 <RCC_AHB1PeriphClockCmd>
	//Data and Clock Pins from PORT B
	GPIO_InitTypeDef GPIOB_InitStruct;
	GPIOB_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15 | GPIO_Pin_9;
 800081c:	f24e 63f8 	movw	r3, #59128	; 0xe6f8
 8000820:	9306      	str	r3, [sp, #24]
	GPIOB_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000822:	f88d 401c 	strb.w	r4, [sp, #28]
	GPIOB_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000826:	f88d 501e 	strb.w	r5, [sp, #30]
	GPIOB_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800082a:	f88d 401f 	strb.w	r4, [sp, #31]
	GPIOB_InitStruct.GPIO_Speed = GPIO_Medium_Speed;
 800082e:	f88d 401d 	strb.w	r4, [sp, #29]
	GPIO_Init(GPIOB, &GPIOB_InitStruct);
 8000832:	4f26      	ldr	r7, [pc, #152]	; (80008cc <extender_init+0xe8>)
 8000834:	a906      	add	r1, sp, #24
 8000836:	4638      	mov	r0, r7
 8000838:	f7ff fdf0 	bl	800041c <GPIO_Init>

	GPIOB_InitStruct.GPIO_Pin = CL_OE_PIN;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	9306      	str	r3, [sp, #24]
	GPIOB_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000842:	f88d 401c 	strb.w	r4, [sp, #28]
	GPIOB_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000846:	f88d 501e 	strb.w	r5, [sp, #30]
	GPIOB_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800084a:	f88d 601f 	strb.w	r6, [sp, #31]
	GPIOB_InitStruct.GPIO_Speed = GPIO_Medium_Speed;
 800084e:	f88d 401d 	strb.w	r4, [sp, #29]
	GPIO_Init(GPIOB, &GPIOB_InitStruct);
 8000852:	a906      	add	r1, sp, #24
 8000854:	4638      	mov	r0, r7
 8000856:	f7ff fde1 	bl	800041c <GPIO_Init>

	GPIO_InitTypeDef GPIOB_Sensors_InitStruct;
	GPIOB_Sensors_InitStruct.GPIO_Pin = SENSOR1_PIN | SENSOR2_PIN | PUSH_BUTTON;
 800085a:	2307      	movs	r3, #7
 800085c:	9304      	str	r3, [sp, #16]
	GPIOB_Sensors_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 800085e:	f88d 5014 	strb.w	r5, [sp, #20]
	GPIOB_Sensors_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000862:	f88d 5016 	strb.w	r5, [sp, #22]
	GPIOB_Sensors_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000866:	f88d 4017 	strb.w	r4, [sp, #23]
	GPIOB_Sensors_InitStruct.GPIO_Speed = GPIO_High_Speed;
 800086a:	2303      	movs	r3, #3
 800086c:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_Init(GPIOB, &GPIOB_Sensors_InitStruct);
 8000870:	a904      	add	r1, sp, #16
 8000872:	4638      	mov	r0, r7
 8000874:	f7ff fdd2 	bl	800041c <GPIO_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000878:	4621      	mov	r1, r4
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff feba 	bl	80005f4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIOC_InitStruct;
	GPIOC_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8000880:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000884:	9302      	str	r3, [sp, #8]
	GPIOC_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000886:	f88d 400c 	strb.w	r4, [sp, #12]
	GPIOC_InitStruct.GPIO_OType = GPIO_OType_PP;
 800088a:	f88d 500e 	strb.w	r5, [sp, #14]
	GPIOC_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800088e:	f88d 500f 	strb.w	r5, [sp, #15]
	GPIOC_InitStruct.GPIO_Speed = GPIO_Fast_Speed;
 8000892:	f88d 600d 	strb.w	r6, [sp, #13]
	GPIO_Init(GPIOC, &GPIOC_InitStruct);
 8000896:	a902      	add	r1, sp, #8
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <extender_init+0xec>)
 800089a:	f7ff fdbf 	bl	800041c <GPIO_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800089e:	4621      	mov	r1, r4
 80008a0:	2008      	movs	r0, #8
 80008a2:	f7ff fea7 	bl	80005f4 <RCC_AHB1PeriphClockCmd>

	//Data and Clock Pins from PORT D
	GPIO_InitTypeDef GPIOD_InitStruct;
	GPIOD_InitStruct.GPIO_Pin = GPIO_Pin_2;
 80008a6:	2304      	movs	r3, #4
 80008a8:	9300      	str	r3, [sp, #0]
	GPIOD_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80008aa:	f88d 4004 	strb.w	r4, [sp, #4]
	GPIOD_InitStruct.GPIO_OType = GPIO_OType_PP;
 80008ae:	f88d 5006 	strb.w	r5, [sp, #6]
	GPIOD_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80008b2:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIOD_InitStruct.GPIO_Speed = GPIO_Medium_Speed;
 80008b6:	f88d 4005 	strb.w	r4, [sp, #5]
	GPIO_Init(GPIOD, &GPIOD_InitStruct);
 80008ba:	4669      	mov	r1, sp
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <extender_init+0xf0>)
 80008be:	f7ff fdad 	bl	800041c <GPIO_Init>
}
 80008c2:	b00b      	add	sp, #44	; 0x2c
 80008c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020400 	.word	0x40020400
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020c00 	.word	0x40020c00

080008d8 <sensor1_pnp_init>:

void sensor1_pnp_init(void)
{
 80008d8:	b500      	push	{lr}
 80008da:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80008dc:	2101      	movs	r1, #1
 80008de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008e2:	f7ff fe95 	bl	8000610 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fe9f 	bl	800062c <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStruct;
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 80008ee:	2301      	movs	r3, #1
 80008f0:	9300      	str	r3, [sp, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80008f2:	2200      	movs	r2, #0
 80008f4:	f88d 2004 	strb.w	r2, [sp, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 80008f8:	2208      	movs	r2, #8
 80008fa:	f88d 2005 	strb.w	r2, [sp, #5]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80008fe:	f88d 3006 	strb.w	r3, [sp, #6]
	EXTI_Init(&EXTI_InitStruct);
 8000902:	4668      	mov	r0, sp
 8000904:	f7ff fc7e 	bl	8000204 <EXTI_Init>
	NVIC_InitEXTI.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitEXTI.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitEXTI.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_Init(&NVIC_InitEXTI); */
//	NVIC_EnableIRQ(EXTI0_IRQn);
}
 8000908:	b003      	add	sp, #12
 800090a:	f85d fb04 	ldr.w	pc, [sp], #4

0800090e <sensor1_npn_init>:

void sensor1_npn_init(void)
{
 800090e:	b500      	push	{lr}
 8000910:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000912:	2101      	movs	r1, #1
 8000914:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000918:	f7ff fe7a 	bl	8000610 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);
 800091c:	2100      	movs	r1, #0
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fe84 	bl	800062c <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStruct;
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8000924:	2301      	movs	r3, #1
 8000926:	9300      	str	r3, [sp, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000928:	2200      	movs	r2, #0
 800092a:	f88d 2004 	strb.w	r2, [sp, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 800092e:	220c      	movs	r2, #12
 8000930:	f88d 2005 	strb.w	r2, [sp, #5]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000934:	f88d 3006 	strb.w	r3, [sp, #6]
	EXTI_Init(&EXTI_InitStruct);
 8000938:	4668      	mov	r0, sp
 800093a:	f7ff fc63 	bl	8000204 <EXTI_Init>
	NVIC_InitEXTI.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitEXTI.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitEXTI.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_Init(&NVIC_InitEXTI);*/
//	NVIC_EnableIRQ(EXTI0_IRQn);
}
 800093e:	b003      	add	sp, #12
 8000940:	f85d fb04 	ldr.w	pc, [sp], #4

08000944 <sensor2_pnp_init>:

void sensor2_pnp_init(void)
{
 8000944:	b500      	push	{lr}
 8000946:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000948:	2101      	movs	r1, #1
 800094a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800094e:	f7ff fe5f 	bl	8000610 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource1);
 8000952:	2101      	movs	r1, #1
 8000954:	4608      	mov	r0, r1
 8000956:	f7ff fe69 	bl	800062c <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStruct;
	EXTI_InitStruct.EXTI_Line = EXTI_Line1;
 800095a:	2302      	movs	r3, #2
 800095c:	9300      	str	r3, [sp, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800095e:	2300      	movs	r3, #0
 8000960:	f88d 3004 	strb.w	r3, [sp, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8000964:	2308      	movs	r3, #8
 8000966:	f88d 3005 	strb.w	r3, [sp, #5]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 800096a:	2301      	movs	r3, #1
 800096c:	f88d 3006 	strb.w	r3, [sp, #6]
	EXTI_Init(&EXTI_InitStruct);
 8000970:	4668      	mov	r0, sp
 8000972:	f7ff fc47 	bl	8000204 <EXTI_Init>
	NVIC_InitEXTI.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitEXTI.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitEXTI.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_Init(&NVIC_InitEXTI);*/
//	NVIC_EnableIRQ(EXTI1_IRQn);
}
 8000976:	b003      	add	sp, #12
 8000978:	f85d fb04 	ldr.w	pc, [sp], #4

0800097c <sensor2_npn_init>:

void sensor2_npn_init(void)
{
 800097c:	b500      	push	{lr}
 800097e:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000980:	2101      	movs	r1, #1
 8000982:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000986:	f7ff fe43 	bl	8000610 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource1);
 800098a:	2101      	movs	r1, #1
 800098c:	4608      	mov	r0, r1
 800098e:	f7ff fe4d 	bl	800062c <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStruct;
	EXTI_InitStruct.EXTI_Line = EXTI_Line1;
 8000992:	2302      	movs	r3, #2
 8000994:	9300      	str	r3, [sp, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000996:	2300      	movs	r3, #0
 8000998:	f88d 3004 	strb.w	r3, [sp, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 800099c:	230c      	movs	r3, #12
 800099e:	f88d 3005 	strb.w	r3, [sp, #5]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f88d 3006 	strb.w	r3, [sp, #6]
	EXTI_Init(&EXTI_InitStruct);
 80009a8:	4668      	mov	r0, sp
 80009aa:	f7ff fc2b 	bl	8000204 <EXTI_Init>
	NVIC_InitEXTI.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitEXTI.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitEXTI.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_Init(&NVIC_InitEXTI); */
//	NVIC_EnableIRQ(EXTI1_IRQn);
}
 80009ae:	b003      	add	sp, #12
 80009b0:	f85d fb04 	ldr.w	pc, [sp], #4

080009b4 <EXTI0_IRQHandler>:
	brake_on = 0;
	brake_off = 1;
}
*/
void EXTI0_IRQHandler (void)
{
 80009b4:	b508      	push	{r3, lr}
    if (Mode == SETTING)
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <EXTI0_IRQHandler+0x70>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d012      	beq.n	80009e6 <EXTI0_IRQHandler+0x32>
    {
    	EXTI_ClearITPendingBit(EXTI_Line0);
    	return; // MJN
    }
    else if (EXTI_GetITStatus(EXTI_Line0) != RESET)
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fc67 	bl	8000294 <EXTI_GetITStatus>
 80009c6:	b168      	cbz	r0, 80009e4 <EXTI0_IRQHandler+0x30>
	{
		if((sensor_key == 1) && (config_hw.Sensor1.Sensor_Usage == ON))
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <EXTI0_IRQHandler+0x74>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d00d      	beq.n	80009ee <EXTI0_IRQHandler+0x3a>
		{
			GPIO_SetBits(GPIOB, CL_OE_PIN);
			sensor_key = 0;
			feed_next_data = 1;
		}
		else if((sensor_key == 0) && (config_hw.Sensor1.Sensor_Usage == OFF))
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <EXTI0_IRQHandler+0x74>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b913      	cbnz	r3, 80009de <EXTI0_IRQHandler+0x2a>
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <EXTI0_IRQHandler+0x78>)
 80009da:	78db      	ldrb	r3, [r3, #3]
 80009dc:	b1bb      	cbz	r3, 8000a0e <EXTI0_IRQHandler+0x5a>
			sensor_key = 1;
			action_feed_data();
		//	g_curr_line++;
		//	currline_response(SUCCES);
		}
		EXTI_ClearITPendingBit(EXTI_Line0);
 80009de:	2001      	movs	r0, #1
 80009e0:	f7ff fc62 	bl	80002a8 <EXTI_ClearITPendingBit>
 80009e4:	bd08      	pop	{r3, pc}
    	EXTI_ClearITPendingBit(EXTI_Line0);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fc5e 	bl	80002a8 <EXTI_ClearITPendingBit>
    	return; // MJN
 80009ec:	bd08      	pop	{r3, pc}
		if((sensor_key == 1) && (config_hw.Sensor1.Sensor_Usage == ON))
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <EXTI0_IRQHandler+0x78>)
 80009f0:	78db      	ldrb	r3, [r3, #3]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d1ed      	bne.n	80009d2 <EXTI0_IRQHandler+0x1e>
			GPIO_SetBits(GPIOB, CL_OE_PIN);
 80009f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <EXTI0_IRQHandler+0x7c>)
 80009fc:	f7ff fd53 	bl	80004a6 <GPIO_SetBits>
			sensor_key = 0;
 8000a00:	2200      	movs	r2, #0
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <EXTI0_IRQHandler+0x74>)
 8000a04:	701a      	strb	r2, [r3, #0]
			feed_next_data = 1;
 8000a06:	2201      	movs	r2, #1
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <EXTI0_IRQHandler+0x80>)
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e7e7      	b.n	80009de <EXTI0_IRQHandler+0x2a>
			GPIO_ResetBits(GPIOB, CL_OE_PIN);
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <EXTI0_IRQHandler+0x7c>)
 8000a14:	f7ff fd49 	bl	80004aa <GPIO_ResetBits>
			sensor_key = 1;
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <EXTI0_IRQHandler+0x74>)
 8000a1c:	701a      	strb	r2, [r3, #0]
			action_feed_data();
 8000a1e:	f000 ff79 	bl	8001914 <action_feed_data>
 8000a22:	e7dc      	b.n	80009de <EXTI0_IRQHandler+0x2a>
 8000a24:	2000031d 	.word	0x2000031d
 8000a28:	200000f0 	.word	0x200000f0
 8000a2c:	20000320 	.word	0x20000320
 8000a30:	40020400 	.word	0x40020400
 8000a34:	200002e9 	.word	0x200002e9

08000a38 <EXTI1_IRQHandler>:
	}
}

void EXTI1_IRQHandler (void)
{
 8000a38:	b508      	push	{r3, lr}
    if (Mode == SETTING)
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <EXTI1_IRQHandler+0x70>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d012      	beq.n	8000a6a <EXTI1_IRQHandler+0x32>
    {
    	EXTI_ClearITPendingBit(EXTI_Line1);
    	return; // MJN
    }
	if (EXTI_GetITStatus(EXTI_Line1) != RESET)
 8000a44:	2002      	movs	r0, #2
 8000a46:	f7ff fc25 	bl	8000294 <EXTI_GetITStatus>
 8000a4a:	b168      	cbz	r0, 8000a68 <EXTI1_IRQHandler+0x30>
	{
		if((sensor_key == 0) && (config_hw.Sensor2.Sensor_Usage == OFF))
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <EXTI1_IRQHandler+0x74>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b913      	cbnz	r3, 8000a58 <EXTI1_IRQHandler+0x20>
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <EXTI1_IRQHandler+0x78>)
 8000a54:	799b      	ldrb	r3, [r3, #6]
 8000a56:	b163      	cbz	r3, 8000a72 <EXTI1_IRQHandler+0x3a>
			sensor_key = 1;
			action_feed_data();
		//	g_curr_line++;
		//	currline_response(SUCCES);
		}
		else if((sensor_key == 1) && (config_hw.Sensor2.Sensor_Usage == ON))
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <EXTI1_IRQHandler+0x74>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d012      	beq.n	8000a88 <EXTI1_IRQHandler+0x50>
		{
			GPIO_SetBits(GPIOB, CL_OE_PIN);
			sensor_key = 0;
			feed_next_data = 1;
		}
		EXTI_ClearITPendingBit(EXTI_Line1);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff fc20 	bl	80002a8 <EXTI_ClearITPendingBit>
 8000a68:	bd08      	pop	{r3, pc}
    	EXTI_ClearITPendingBit(EXTI_Line1);
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f7ff fc1c 	bl	80002a8 <EXTI_ClearITPendingBit>
    	return; // MJN
 8000a70:	bd08      	pop	{r3, pc}
			GPIO_ResetBits(GPIOB, CL_OE_PIN);
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <EXTI1_IRQHandler+0x7c>)
 8000a78:	f7ff fd17 	bl	80004aa <GPIO_ResetBits>
			sensor_key = 1;
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <EXTI1_IRQHandler+0x74>)
 8000a80:	701a      	strb	r2, [r3, #0]
			action_feed_data();
 8000a82:	f000 ff47 	bl	8001914 <action_feed_data>
 8000a86:	e7ec      	b.n	8000a62 <EXTI1_IRQHandler+0x2a>
		else if((sensor_key == 1) && (config_hw.Sensor2.Sensor_Usage == ON))
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <EXTI1_IRQHandler+0x78>)
 8000a8a:	799b      	ldrb	r3, [r3, #6]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d1e8      	bne.n	8000a62 <EXTI1_IRQHandler+0x2a>
			GPIO_SetBits(GPIOB, CL_OE_PIN);
 8000a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <EXTI1_IRQHandler+0x7c>)
 8000a96:	f7ff fd06 	bl	80004a6 <GPIO_SetBits>
			sensor_key = 0;
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <EXTI1_IRQHandler+0x74>)
 8000a9e:	701a      	strb	r2, [r3, #0]
			feed_next_data = 1;
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <EXTI1_IRQHandler+0x80>)
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e7dc      	b.n	8000a62 <EXTI1_IRQHandler+0x2a>
 8000aa8:	2000031d 	.word	0x2000031d
 8000aac:	200000f0 	.word	0x200000f0
 8000ab0:	20000320 	.word	0x20000320
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	200002e9 	.word	0x200002e9

08000abc <latch_addr_bit>:
	latch_addr_bit(byte & (1<<1));
	latch_addr_bit(byte & (1<<0));
}

void latch_addr_bit(uint8_t bit)
{
 8000abc:	b510      	push	{r4, lr}
	SDATA_BIT(bit);
 8000abe:	b980      	cbnz	r0, 8000ae2 <latch_addr_bit+0x26>
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <latch_addr_bit+0x34>)
 8000ac6:	f7ff fcf2 	bl	80004ae <GPIO_WriteBit>
	Mydelay(3);
	SCLOCK_HIGH;
 8000aca:	4c09      	ldr	r4, [pc, #36]	; (8000af0 <latch_addr_bit+0x34>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	2120      	movs	r1, #32
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f7ff fcec 	bl	80004ae <GPIO_WriteBit>
	Mydelay(3);
	SCLOCK_LOW;
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4620      	mov	r0, r4
 8000adc:	f7ff fce7 	bl	80004ae <GPIO_WriteBit>
 8000ae0:	bd10      	pop	{r4, pc}
	SDATA_BIT(bit);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4802      	ldr	r0, [pc, #8]	; (8000af0 <latch_addr_bit+0x34>)
 8000ae8:	f7ff fce1 	bl	80004ae <GPIO_WriteBit>
 8000aec:	e7ed      	b.n	8000aca <latch_addr_bit+0xe>
 8000aee:	bf00      	nop
 8000af0:	40020000 	.word	0x40020000

08000af4 <latch_addr_byte>:
{
 8000af4:	b510      	push	{r4, lr}
 8000af6:	4604      	mov	r4, r0
	latch_addr_bit(byte & (1<<7));
 8000af8:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000afc:	f7ff ffde 	bl	8000abc <latch_addr_bit>
	latch_addr_bit(byte & (1<<6));
 8000b00:	f004 0040 	and.w	r0, r4, #64	; 0x40
 8000b04:	f7ff ffda 	bl	8000abc <latch_addr_bit>
	latch_addr_bit(byte & (1<<5));
 8000b08:	f004 0020 	and.w	r0, r4, #32
 8000b0c:	f7ff ffd6 	bl	8000abc <latch_addr_bit>
	latch_addr_bit(byte & (1<<4));
 8000b10:	f004 0010 	and.w	r0, r4, #16
 8000b14:	f7ff ffd2 	bl	8000abc <latch_addr_bit>
	latch_addr_bit(byte & (1<<3));
 8000b18:	f004 0008 	and.w	r0, r4, #8
 8000b1c:	f7ff ffce 	bl	8000abc <latch_addr_bit>
	latch_addr_bit(byte & (1<<2));
 8000b20:	f004 0004 	and.w	r0, r4, #4
 8000b24:	f7ff ffca 	bl	8000abc <latch_addr_bit>
	latch_addr_bit(byte & (1<<1));
 8000b28:	f004 0002 	and.w	r0, r4, #2
 8000b2c:	f7ff ffc6 	bl	8000abc <latch_addr_bit>
	latch_addr_bit(byte & (1<<0));
 8000b30:	f004 0001 	and.w	r0, r4, #1
 8000b34:	f7ff ffc2 	bl	8000abc <latch_addr_bit>
 8000b38:	bd10      	pop	{r4, pc}
	...

08000b3c <latch_data_bit>:
	latch_data_bit(byte & (1<<1),data_port,data_pin,clock_port,clock_pin);
	latch_data_bit(byte & (1<<0),data_port,data_pin,clock_port,clock_pin);
}

void latch_data_bit(uint8_t bit,uint8_t data_port,uint8_t data_pin,uint8_t clock_port,uint8_t clock_pin)
{
 8000b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3e:	4615      	mov	r5, r2
 8000b40:	461c      	mov	r4, r3
 8000b42:	f89d 7018 	ldrb.w	r7, [sp, #24]
	DATA_BIT(bit,data_port,data_pin);
 8000b46:	b9e0      	cbnz	r0, 8000b82 <latch_data_bit+0x46>
 8000b48:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4913      	ldr	r1, [pc, #76]	; (8000b9c <latch_data_bit+0x60>)
 8000b50:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8000b54:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <latch_data_bit+0x64>)
 8000b56:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8000b5a:	f7ff fca8 	bl	80004ae <GPIO_WriteBit>
	Mydelay(3);
	CLOCK_HIGH(clock_port,clock_pin);
 8000b5e:	3c41      	subs	r4, #65	; 0x41
 8000b60:	4e0e      	ldr	r6, [pc, #56]	; (8000b9c <latch_data_bit+0x60>)
 8000b62:	4d0f      	ldr	r5, [pc, #60]	; (8000ba0 <latch_data_bit+0x64>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
 8000b6a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000b6e:	f7ff fc9e 	bl	80004ae <GPIO_WriteBit>
	Mydelay(3);
	CLOCK_LOW(clock_port,clock_pin);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
 8000b78:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000b7c:	f7ff fc97 	bl	80004ae <GPIO_WriteBit>
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	DATA_BIT(bit,data_port,data_pin);
 8000b82:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8000b86:	2201      	movs	r2, #1
 8000b88:	4904      	ldr	r1, [pc, #16]	; (8000b9c <latch_data_bit+0x60>)
 8000b8a:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <latch_data_bit+0x64>)
 8000b90:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8000b94:	f7ff fc8b 	bl	80004ae <GPIO_WriteBit>
 8000b98:	e7e1      	b.n	8000b5e <latch_data_bit+0x22>
 8000b9a:	bf00      	nop
 8000b9c:	20000010 	.word	0x20000010
 8000ba0:	20000030 	.word	0x20000030

08000ba4 <latch_data_byte>:
{
 8000ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	4604      	mov	r4, r0
 8000bac:	460e      	mov	r6, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	4698      	mov	r8, r3
 8000bb2:	f89d 5020 	ldrb.w	r5, [sp, #32]
	latch_data_bit(byte & (1<<7),data_port,data_pin,clock_port,clock_pin);
 8000bb6:	9500      	str	r5, [sp, #0]
 8000bb8:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000bbc:	f7ff ffbe 	bl	8000b3c <latch_data_bit>
	latch_data_bit(byte & (1<<6),data_port,data_pin,clock_port,clock_pin);
 8000bc0:	9500      	str	r5, [sp, #0]
 8000bc2:	4643      	mov	r3, r8
 8000bc4:	463a      	mov	r2, r7
 8000bc6:	4631      	mov	r1, r6
 8000bc8:	f004 0040 	and.w	r0, r4, #64	; 0x40
 8000bcc:	f7ff ffb6 	bl	8000b3c <latch_data_bit>
	latch_data_bit(byte & (1<<5),data_port,data_pin,clock_port,clock_pin);
 8000bd0:	9500      	str	r5, [sp, #0]
 8000bd2:	4643      	mov	r3, r8
 8000bd4:	463a      	mov	r2, r7
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	f004 0020 	and.w	r0, r4, #32
 8000bdc:	f7ff ffae 	bl	8000b3c <latch_data_bit>
	latch_data_bit(byte & (1<<4),data_port,data_pin,clock_port,clock_pin);
 8000be0:	9500      	str	r5, [sp, #0]
 8000be2:	4643      	mov	r3, r8
 8000be4:	463a      	mov	r2, r7
 8000be6:	4631      	mov	r1, r6
 8000be8:	f004 0010 	and.w	r0, r4, #16
 8000bec:	f7ff ffa6 	bl	8000b3c <latch_data_bit>
	latch_data_bit(byte & (1<<3),data_port,data_pin,clock_port,clock_pin);
 8000bf0:	9500      	str	r5, [sp, #0]
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	463a      	mov	r2, r7
 8000bf6:	4631      	mov	r1, r6
 8000bf8:	f004 0008 	and.w	r0, r4, #8
 8000bfc:	f7ff ff9e 	bl	8000b3c <latch_data_bit>
	latch_data_bit(byte & (1<<2),data_port,data_pin,clock_port,clock_pin);
 8000c00:	9500      	str	r5, [sp, #0]
 8000c02:	4643      	mov	r3, r8
 8000c04:	463a      	mov	r2, r7
 8000c06:	4631      	mov	r1, r6
 8000c08:	f004 0004 	and.w	r0, r4, #4
 8000c0c:	f7ff ff96 	bl	8000b3c <latch_data_bit>
	latch_data_bit(byte & (1<<1),data_port,data_pin,clock_port,clock_pin);
 8000c10:	9500      	str	r5, [sp, #0]
 8000c12:	4643      	mov	r3, r8
 8000c14:	463a      	mov	r2, r7
 8000c16:	4631      	mov	r1, r6
 8000c18:	f004 0002 	and.w	r0, r4, #2
 8000c1c:	f7ff ff8e 	bl	8000b3c <latch_data_bit>
	latch_data_bit(byte & (1<<0),data_port,data_pin,clock_port,clock_pin);
 8000c20:	9500      	str	r5, [sp, #0]
 8000c22:	4643      	mov	r3, r8
 8000c24:	463a      	mov	r2, r7
 8000c26:	4631      	mov	r1, r6
 8000c28:	f004 0001 	and.w	r0, r4, #1
 8000c2c:	f7ff ff86 	bl	8000b3c <latch_data_bit>
}
 8000c30:	b002      	add	sp, #8
 8000c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000c38 <flash_write>:
 * @param size			: size of data
 * @param address		: address at which data to be written in flash memory
 * @return	uint32_t FLAH_PASS/FLASH_FAIL
 */
int flash_write(uint8_t *flash_data, uint16_t size, uint32_t address)
{
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	4607      	mov	r7, r0
 8000c3c:	460e      	mov	r6, r1
 8000c3e:	4615      	mov	r5, r2
	//uint16_t data = 0;
	uint8_t data = 0;
	int byte_index = 0;

	/* Unlock the Flash Bank1 Program Erase controller */
	FLASH_Unlock();
 8000c40:	f7ff fb38 	bl	80002b4 <FLASH_Unlock>

	for(byte_index = 0; byte_index < size; byte_index++)
 8000c44:	2400      	movs	r4, #0
 8000c46:	42b4      	cmp	r4, r6
 8000c48:	da10      	bge.n	8000c6c <flash_write+0x34>
		}
#endif

		data = flash_data[byte_index];
		//FLASHStatus = FLASH_ProgramHalfWord(address, data);
		FLASHStatus = FLASH_ProgramByte(address, data);
 8000c4a:	5d39      	ldrb	r1, [r7, r4]
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f7ff fbc7 	bl	80003e0 <FLASH_ProgramByte>
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <flash_write+0x3c>)
 8000c54:	7018      	strb	r0, [r3, #0]
		address += 1;
 8000c56:	3501      	adds	r5, #1
		if (FLASHStatus != FLASH_COMPLETE)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b09      	cmp	r3, #9
 8000c5e:	d101      	bne.n	8000c64 <flash_write+0x2c>
	for(byte_index = 0; byte_index < size; byte_index++)
 8000c60:	3401      	adds	r4, #1
 8000c62:	e7f0      	b.n	8000c46 <flash_write+0xe>
		{
			/* lock flash again */
			FLASH_Lock();
 8000c64:	f7ff fb36 	bl	80002d4 <FLASH_Lock>
			return FLASH_FAIL;
 8000c68:	2001      	movs	r0, #1
 8000c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FLASH_FAIL;
		}
	}
#endif
	/* lock flash again */
	FLASH_Lock();
 8000c6c:	f7ff fb32 	bl	80002d4 <FLASH_Lock>

	return FLASH_PASS;
 8000c70:	2000      	movs	r0, #0
}
 8000c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c74:	200000f1 	.word	0x200000f1

08000c78 <flash_sector_erase>:
 * @param page_addr : start address of the page
 *
 * @return FLASH_PASS/FLASH_FAIL
 */
FlashState flash_sector_erase(uint32_t page_addr)
{
 8000c78:	b510      	push	{r4, lr}
 8000c7a:	4604      	mov	r4, r0
	FlashState state = FLASH_FAIL;
	uint8_t VoltRange = VoltageRange_3;
	/* Unlock the Flash Bank1 Program Erase controller */
	FLASH_Unlock();
 8000c7c:	f7ff fb1a 	bl	80002b4 <FLASH_Unlock>
	/* erase the specified page of flash memory */
	if(FLASH_EraseSector(page_addr, VoltRange) == FLASH_COMPLETE)
 8000c80:	2102      	movs	r1, #2
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff fb74 	bl	8000370 <FLASH_EraseSector>
 8000c88:	2809      	cmp	r0, #9
 8000c8a:	d004      	beq.n	8000c96 <flash_sector_erase+0x1e>
	FlashState state = FLASH_FAIL;
 8000c8c:	2401      	movs	r4, #1
	{
		state = FLASH_PASS;
	}
	/* lock flash again */
	FLASH_Lock();
 8000c8e:	f7ff fb21 	bl	80002d4 <FLASH_Lock>
	return state;
}
 8000c92:	4620      	mov	r0, r4
 8000c94:	bd10      	pop	{r4, pc}
		state = FLASH_PASS;
 8000c96:	2400      	movs	r4, #0
 8000c98:	e7f9      	b.n	8000c8e <flash_sector_erase+0x16>
	...

08000c9c <action_idle>:

	}
}

void action_idle(void)
{
 8000c9c:	b508      	push	{r3, lr}
	if ((cmd_count == SIZE_CMD))
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <action_idle+0x14>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d000      	beq.n	8000ca8 <action_idle+0xc>
 8000ca6:	bd08      	pop	{r3, pc}
	{
		sel_action();
 8000ca8:	f001 fa7e 	bl	80021a8 <sel_action>
	}
}
 8000cac:	e7fb      	b.n	8000ca6 <action_idle+0xa>
 8000cae:	bf00      	nop
 8000cb0:	2000111c 	.word	0x2000111c

08000cb4 <action_status>:

void action_status(void)
{
 8000cb4:	b508      	push	{r3, lr}
	response(SUCCES);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f9d4 	bl	8002064 <response>
 8000cbc:	bd08      	pop	{r3, pc}
	...

08000cc0 <find_existence_duplicate_fileID>:
}


int16_t find_existence_duplicate_fileID(uint8_t findFileId, uint8_t *duplicateFileIdPos)
{
 8000cc0:	b4f0      	push	{r4, r5, r6, r7}
 8000cc2:	4606      	mov	r6, r0
	int16_t iter, duplicateFileIdPosCounter = 0;
	for(iter = findFileId; iter < config_data.ImageCount; iter++)
 8000cc4:	b202      	sxth	r2, r0
	int16_t iter, duplicateFileIdPosCounter = 0;
 8000cc6:	2000      	movs	r0, #0
	for(iter = findFileId; iter < config_data.ImageCount; iter++)
 8000cc8:	e001      	b.n	8000cce <find_existence_duplicate_fileID+0xe>
 8000cca:	3201      	adds	r2, #1
 8000ccc:	b212      	sxth	r2, r2
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <find_existence_duplicate_fileID+0x3c>)
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	da0f      	bge.n	8000cf6 <find_existence_duplicate_fileID+0x36>
	{
		if(image_order.ImgOrder[findFileId - 1].FileID == image_order.ImgOrder[iter].FileID)
 8000cd6:	1e73      	subs	r3, r6, #1
 8000cd8:	4c09      	ldr	r4, [pc, #36]	; (8000d00 <find_existence_duplicate_fileID+0x40>)
 8000cda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000cde:	005d      	lsls	r5, r3, #1
 8000ce0:	5d67      	ldrb	r7, [r4, r5]
 8000ce2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8000ce6:	006b      	lsls	r3, r5, #1
 8000ce8:	5ce3      	ldrb	r3, [r4, r3]
 8000cea:	429f      	cmp	r7, r3
 8000cec:	d1ed      	bne.n	8000cca <find_existence_duplicate_fileID+0xa>
		{
			duplicateFileIdPos[duplicateFileIdPosCounter] = iter;
 8000cee:	540a      	strb	r2, [r1, r0]
			duplicateFileIdPosCounter++;
 8000cf0:	3001      	adds	r0, #1
 8000cf2:	b200      	sxth	r0, r0
 8000cf4:	e7e9      	b.n	8000cca <find_existence_duplicate_fileID+0xa>
		}

	}

	return duplicateFileIdPosCounter;
}
 8000cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000114c 	.word	0x2000114c
 8000d00:	20000f9c 	.word	0x20000f9c

08000d04 <action_load_handle>:
void action_load_handle(void)
{
	uint8_t fileIdPosArr[16];
	int16_t duplicateFileIdCount = 0, iter;

	if (cmd_count >= (sizeof(ejac_cmd_load_t)+SIZE_CMD))
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <action_load_handle+0xb8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b0c      	cmp	r3, #12
 8000d0a:	d800      	bhi.n	8000d0e <action_load_handle+0xa>
 8000d0c:	4770      	bx	lr
{
 8000d0e:	b530      	push	{r4, r5, lr}
 8000d10:	b085      	sub	sp, #20
	{
			memset(fileIdPosArr, 0, 16);
 8000d12:	2100      	movs	r1, #0
 8000d14:	9100      	str	r1, [sp, #0]
 8000d16:	9101      	str	r1, [sp, #4]
 8000d18:	9102      	str	r1, [sp, #8]
 8000d1a:	9103      	str	r1, [sp, #12]
			memcpy(&load_cmd, (save_buffer + SIZE_CMD), sizeof(ejac_cmd_load_t));
 8000d1c:	4c28      	ldr	r4, [pc, #160]	; (8000dc0 <action_load_handle+0xbc>)
 8000d1e:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <action_load_handle+0xc0>)
 8000d20:	4603      	mov	r3, r0
 8000d22:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	6025      	str	r5, [r4, #0]
 8000d2a:	6062      	str	r2, [r4, #4]
 8000d2c:	7a1b      	ldrb	r3, [r3, #8]
 8000d2e:	7223      	strb	r3, [r4, #8]
			cmd_count = 0;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <action_load_handle+0xb8>)
 8000d32:	6019      	str	r1, [r3, #0]
			/* buff_len is the total size of the current image being loaded and is used
			 * for comparison purpose as image data will be arriving in chunk format */
			buff_len = load_cmd.Width * load_cmd.Height;
 8000d34:	f8d4 2005 	ldr.w	r2, [r4, #5]
 8000d38:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8000d3c:	fb03 f302 	mul.w	r3, r3, r2
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <action_load_handle+0xc4>)
 8000d42:	6013      	str	r3, [r2, #0]
			memset(save_buffer,0, PAGE_SIZE);
 8000d44:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000d48:	f001 fb2f 	bl	80023aa <memset>
			file_id = load_cmd.FileId;
 8000d4c:	7820      	ldrb	r0, [r4, #0]
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <action_load_handle+0xc8>)
 8000d50:	7018      	strb	r0, [r3, #0]
			if(load_cmd.FileId == 1)
 8000d52:	2801      	cmp	r0, #1
 8000d54:	d006      	beq.n	8000d64 <action_load_handle+0x60>
				/* duplicateFileIdcount consists a valid count if same body
				 * is repeated as another image
				 * Duplicate count is used so as to not write the same image twice
				 * into the flash*/

				duplicateFileIdCount = find_existence_duplicate_fileID(file_id, fileIdPosArr);
 8000d56:	4669      	mov	r1, sp
 8000d58:	f7ff ffb2 	bl	8000cc0 <find_existence_duplicate_fileID>
				if(duplicateFileIdCount > 0)
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	dd17      	ble.n	8000d90 <action_load_handle+0x8c>
 8000d60:	2300      	movs	r3, #0
 8000d62:	e013      	b.n	8000d8c <action_load_handle+0x88>
				flash_start_addr[0] = 0x08020000;
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <action_load_handle+0xcc>)
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <action_load_handle+0xd0>)
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e01c      	b.n	8000da6 <action_load_handle+0xa2>
				{
					for(iter = 0; iter < duplicateFileIdCount; iter++)
					{
						int16_t pos = fileIdPosArr[iter];
 8000d6c:	aa04      	add	r2, sp, #16
 8000d6e:	441a      	add	r2, r3
 8000d70:	f812 4c10 	ldrb.w	r4, [r2, #-16]
						flash_start_addr[pos] = (flash_end_addr[load_cmd.FileId - 2] + 2);
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <action_load_handle+0xbc>)
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	3a02      	subs	r2, #2
 8000d7a:	4917      	ldr	r1, [pc, #92]	; (8000dd8 <action_load_handle+0xd4>)
 8000d7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d80:	3202      	adds	r2, #2
 8000d82:	4914      	ldr	r1, [pc, #80]	; (8000dd4 <action_load_handle+0xd0>)
 8000d84:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
					for(iter = 0; iter < duplicateFileIdCount; iter++)
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	4283      	cmp	r3, r0
 8000d8e:	dbed      	blt.n	8000d6c <action_load_handle+0x68>
					}

				}
				flash_start_addr[load_cmd.FileId - 1] = (flash_end_addr[load_cmd.FileId - 2] + 2);
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <action_load_handle+0xbc>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	1e59      	subs	r1, r3, #1
 8000d96:	3b02      	subs	r3, #2
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <action_load_handle+0xd4>)
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <action_load_handle+0xd0>)
 8000da2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

			}
			receive_input_data = 1;
 8000da6:	2201      	movs	r2, #1
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <action_load_handle+0xd8>)
 8000daa:	701a      	strb	r2, [r3, #0]
			response(SUCCES);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f001 f959 	bl	8002064 <response>
			action_flag = BUSY;
 8000db2:	220c      	movs	r2, #12
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <action_load_handle+0xdc>)
 8000db6:	701a      	strb	r2, [r3, #0]
	}
}
 8000db8:	b005      	add	sp, #20
 8000dba:	bd30      	pop	{r4, r5, pc}
 8000dbc:	2000111c 	.word	0x2000111c
 8000dc0:	200010e4 	.word	0x200010e4
 8000dc4:	20000398 	.word	0x20000398
 8000dc8:	20000350 	.word	0x20000350
 8000dcc:	20001144 	.word	0x20001144
 8000dd0:	08020000 	.word	0x08020000
 8000dd4:	200002f4 	.word	0x200002f4
 8000dd8:	200010f0 	.word	0x200010f0
 8000ddc:	200002f0 	.word	0x200002f0
 8000de0:	200010e2 	.word	0x200010e2

08000de4 <action_load>:


void action_load(void)
{
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de6:	b095      	sub	sp, #84	; 0x54
	if(load_count < buff_len)
 8000de8:	4b8c      	ldr	r3, [pc, #560]	; (800101c <action_load+0x238>)
 8000dea:	681c      	ldr	r4, [r3, #0]
 8000dec:	4b8c      	ldr	r3, [pc, #560]	; (8001020 <action_load+0x23c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	429c      	cmp	r4, r3
 8000df2:	d242      	bcs.n	8000e7a <action_load+0x96>
	{
		if(cmd_count >= sizeof(uint32_t))
 8000df4:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <action_load+0x240>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d908      	bls.n	8000e0e <action_load+0x2a>
		{
			memcpy(&current_load_size, (uint8_t *)&save_buffer, sizeof(uint32_t));
 8000dfc:	4b8a      	ldr	r3, [pc, #552]	; (8001028 <action_load+0x244>)
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	4b8a      	ldr	r3, [pc, #552]	; (800102c <action_load+0x248>)
 8000e02:	6019      	str	r1, [r3, #0]
			if((cmd_count >= (current_load_size + sizeof(uint32_t))) )
 8000e04:	1d0a      	adds	r2, r1, #4
 8000e06:	4b87      	ldr	r3, [pc, #540]	; (8001024 <action_load+0x240>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d901      	bls.n	8000e12 <action_load+0x2e>
		}
		load_count = 0;
		action_flag = IDLE;
	}

}
 8000e0e:	b015      	add	sp, #84	; 0x54
 8000e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
				flash_result = flash_write(((uint8_t *)&save_buffer+4),current_load_size,(uint32_t)(flash_start_addr[file_id - 1]+(load_count)));
 8000e12:	4b87      	ldr	r3, [pc, #540]	; (8001030 <action_load+0x24c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	4a86      	ldr	r2, [pc, #536]	; (8001034 <action_load+0x250>)
 8000e1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e1e:	4422      	add	r2, r4
 8000e20:	b289      	uxth	r1, r1
 8000e22:	4885      	ldr	r0, [pc, #532]	; (8001038 <action_load+0x254>)
 8000e24:	f7ff ff08 	bl	8000c38 <flash_write>
 8000e28:	b2c0      	uxtb	r0, r0
				if(flash_result == FLASH_PASS)
 8000e2a:	b140      	cbz	r0, 8000e3e <action_load+0x5a>
				else if(FLASH_FAIL == flash_result)
 8000e2c:	2801      	cmp	r0, #1
 8000e2e:	d1ee      	bne.n	8000e0e <action_load+0x2a>
					response(FAIL_FLASH);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f001 f917 	bl	8002064 <response>
					action_flag = IDLE;
 8000e36:	220b      	movs	r2, #11
 8000e38:	4b80      	ldr	r3, [pc, #512]	; (800103c <action_load+0x258>)
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e7e7      	b.n	8000e0e <action_load+0x2a>
					action_flag = LOAD;
 8000e3e:	4c7f      	ldr	r4, [pc, #508]	; (800103c <action_load+0x258>)
 8000e40:	2501      	movs	r5, #1
 8000e42:	7025      	strb	r5, [r4, #0]
					memset(&save_buffer,0,PAGE_SIZE);
 8000e44:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4877      	ldr	r0, [pc, #476]	; (8001028 <action_load+0x244>)
 8000e4c:	f001 faad 	bl	80023aa <memset>
					load_count += current_load_size;
 8000e50:	4972      	ldr	r1, [pc, #456]	; (800101c <action_load+0x238>)
 8000e52:	4a76      	ldr	r2, [pc, #472]	; (800102c <action_load+0x248>)
 8000e54:	680b      	ldr	r3, [r1, #0]
 8000e56:	6810      	ldr	r0, [r2, #0]
 8000e58:	4403      	add	r3, r0
 8000e5a:	600b      	str	r3, [r1, #0]
					cmd_count = 0;
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	4b71      	ldr	r3, [pc, #452]	; (8001024 <action_load+0x240>)
 8000e60:	6018      	str	r0, [r3, #0]
					current_load_size = 0;
 8000e62:	6010      	str	r0, [r2, #0]
					receive_input_data = 1;
 8000e64:	4b76      	ldr	r3, [pc, #472]	; (8001040 <action_load+0x25c>)
 8000e66:	701d      	strb	r5, [r3, #0]
					img_count++;
 8000e68:	4a76      	ldr	r2, [pc, #472]	; (8001044 <action_load+0x260>)
 8000e6a:	7813      	ldrb	r3, [r2, #0]
 8000e6c:	442b      	add	r3, r5
 8000e6e:	7013      	strb	r3, [r2, #0]
					response(SUCCES);
 8000e70:	f001 f8f8 	bl	8002064 <response>
					action_flag = BUSY;
 8000e74:	230c      	movs	r3, #12
 8000e76:	7023      	strb	r3, [r4, #0]
 8000e78:	e7c9      	b.n	8000e0e <action_load+0x2a>
		memset(&temp_config, 0,sizeof(ejac_image_extra_config_t));
 8000e7a:	223e      	movs	r2, #62	; 0x3e
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	a804      	add	r0, sp, #16
 8000e80:	f001 fa93 	bl	80023aa <memset>
		memset(fileIdPosArr, 0, 16);
 8000e84:	2300      	movs	r3, #0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	9303      	str	r3, [sp, #12]
		receive_input_data = 0;
 8000e8e:	4a6c      	ldr	r2, [pc, #432]	; (8001040 <action_load+0x25c>)
 8000e90:	7013      	strb	r3, [r2, #0]
		if(file_id == 1)
 8000e92:	4b67      	ldr	r3, [pc, #412]	; (8001030 <action_load+0x24c>)
 8000e94:	7818      	ldrb	r0, [r3, #0]
 8000e96:	2801      	cmp	r0, #1
 8000e98:	d006      	beq.n	8000ea8 <action_load+0xc4>
			duplicateFileIdCount = find_existence_duplicate_fileID(file_id, fileIdPosArr);
 8000e9a:	4669      	mov	r1, sp
 8000e9c:	f7ff ff10 	bl	8000cc0 <find_existence_duplicate_fileID>
			if(duplicateFileIdCount > 0)
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	dd1d      	ble.n	8000ee0 <action_load+0xfc>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e019      	b.n	8000edc <action_load+0xf8>
			flash_end_addr[file_id - 1] = flash_start_addr[0]+(load_count);
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4b62      	ldr	r3, [pc, #392]	; (8001034 <action_load+0x250>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	441c      	add	r4, r3
 8000eb0:	4b65      	ldr	r3, [pc, #404]	; (8001048 <action_load+0x264>)
 8000eb2:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
 8000eb6:	e01f      	b.n	8000ef8 <action_load+0x114>
					int16_t pos = fileIdPosArr[iter];
 8000eb8:	aa14      	add	r2, sp, #80	; 0x50
 8000eba:	441a      	add	r2, r3
 8000ebc:	f812 4c50 	ldrb.w	r4, [r2, #-80]
					flash_end_addr[pos] = flash_start_addr[file_id - 1]+(load_count);
 8000ec0:	4a5b      	ldr	r2, [pc, #364]	; (8001030 <action_load+0x24c>)
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	3a01      	subs	r2, #1
 8000ec6:	495b      	ldr	r1, [pc, #364]	; (8001034 <action_load+0x250>)
 8000ec8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ecc:	4953      	ldr	r1, [pc, #332]	; (800101c <action_load+0x238>)
 8000ece:	6809      	ldr	r1, [r1, #0]
 8000ed0:	440a      	add	r2, r1
 8000ed2:	495d      	ldr	r1, [pc, #372]	; (8001048 <action_load+0x264>)
 8000ed4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
				for(iter = 0; iter < duplicateFileIdCount; iter++)
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4283      	cmp	r3, r0
 8000ede:	dbeb      	blt.n	8000eb8 <action_load+0xd4>
			flash_end_addr[file_id - 1] = flash_start_addr[file_id - 1]+(load_count);
 8000ee0:	4b53      	ldr	r3, [pc, #332]	; (8001030 <action_load+0x24c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	4a53      	ldr	r2, [pc, #332]	; (8001034 <action_load+0x250>)
 8000ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eec:	494b      	ldr	r1, [pc, #300]	; (800101c <action_load+0x238>)
 8000eee:	6809      	ldr	r1, [r1, #0]
 8000ef0:	440a      	add	r2, r1
 8000ef2:	4955      	ldr	r1, [pc, #340]	; (8001048 <action_load+0x264>)
 8000ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		memset(save_buffer, 0, PAGE_SIZE);
 8000ef8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000efc:	2100      	movs	r1, #0
 8000efe:	484a      	ldr	r0, [pc, #296]	; (8001028 <action_load+0x244>)
 8000f00:	f001 fa53 	bl	80023aa <memset>
		cmd_count = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	4a47      	ldr	r2, [pc, #284]	; (8001024 <action_load+0x240>)
 8000f08:	6013      	str	r3, [r2, #0]
		buff_len = 0;
 8000f0a:	4a45      	ldr	r2, [pc, #276]	; (8001020 <action_load+0x23c>)
 8000f0c:	6013      	str	r3, [r2, #0]
		memcpy(&temp_config, (uint32_t *)0x08010000, sizeof(ejac_cmd_image_config_t));
 8000f0e:	ac04      	add	r4, sp, #16
 8000f10:	4d4e      	ldr	r5, [pc, #312]	; (800104c <action_load+0x268>)
 8000f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f16:	682b      	ldr	r3, [r5, #0]
 8000f18:	8023      	strh	r3, [r4, #0]
		if(1 == file_id)
 8000f1a:	4b45      	ldr	r3, [pc, #276]	; (8001030 <action_load+0x24c>)
 8000f1c:	781c      	ldrb	r4, [r3, #0]
 8000f1e:	2c01      	cmp	r4, #1
 8000f20:	d034      	beq.n	8000f8c <action_load+0x1a8>
		else if(2 == file_id)
 8000f22:	2c02      	cmp	r4, #2
 8000f24:	d04d      	beq.n	8000fc2 <action_load+0x1de>
		flash_result = flash_sector_erase((uint32_t)CONFIG_ADDR);
 8000f26:	2020      	movs	r0, #32
 8000f28:	f7ff fea6 	bl	8000c78 <flash_sector_erase>
		if (flash_result == FLASH_FAIL)
 8000f2c:	2801      	cmp	r0, #1
 8000f2e:	d06c      	beq.n	800100a <action_load+0x226>
		flash_result = flash_write(temp_ptr, sizeof(ejac_image_extra_config_t), (uint32_t)0x08010000);
 8000f30:	4e46      	ldr	r6, [pc, #280]	; (800104c <action_load+0x268>)
 8000f32:	4632      	mov	r2, r6
 8000f34:	213e      	movs	r1, #62	; 0x3e
 8000f36:	a804      	add	r0, sp, #16
 8000f38:	f7ff fe7e 	bl	8000c38 <flash_write>
 8000f3c:	fa5f fe80 	uxtb.w	lr, r0
		memcpy(&config_data, (uint32_t *)0x08010000, (SIZE_CMD_IMG_CONFIG-SIZE_CMD));
 8000f40:	4d43      	ldr	r5, [pc, #268]	; (8001050 <action_load+0x26c>)
 8000f42:	4634      	mov	r4, r6
 8000f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f46:	6028      	str	r0, [r5, #0]
 8000f48:	6069      	str	r1, [r5, #4]
 8000f4a:	60aa      	str	r2, [r5, #8]
 8000f4c:	60eb      	str	r3, [r5, #12]
 8000f4e:	8823      	ldrh	r3, [r4, #0]
 8000f50:	822b      	strh	r3, [r5, #16]
		memcpy(&extra_config, (uint32_t *)0x08010000, sizeof(ejac_image_extra_config_t));
 8000f52:	4635      	mov	r5, r6
 8000f54:	4c3f      	ldr	r4, [pc, #252]	; (8001054 <action_load+0x270>)
 8000f56:	3630      	adds	r6, #48	; 0x30
 8000f58:	462f      	mov	r7, r5
 8000f5a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000f5c:	6020      	str	r0, [r4, #0]
 8000f5e:	6061      	str	r1, [r4, #4]
 8000f60:	60a2      	str	r2, [r4, #8]
 8000f62:	60e3      	str	r3, [r4, #12]
 8000f64:	463d      	mov	r5, r7
 8000f66:	3410      	adds	r4, #16
 8000f68:	42b7      	cmp	r7, r6
 8000f6a:	d1f5      	bne.n	8000f58 <action_load+0x174>
 8000f6c:	cd07      	ldmia	r5!, {r0, r1, r2}
 8000f6e:	6020      	str	r0, [r4, #0]
 8000f70:	6061      	str	r1, [r4, #4]
 8000f72:	60a2      	str	r2, [r4, #8]
 8000f74:	882b      	ldrh	r3, [r5, #0]
 8000f76:	81a3      	strh	r3, [r4, #12]
		if (flash_result == FLASH_FAIL)
 8000f78:	f1be 0f01 	cmp.w	lr, #1
 8000f7c:	d049      	beq.n	8001012 <action_load+0x22e>
		load_count = 0;
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <action_load+0x238>)
 8000f82:	601a      	str	r2, [r3, #0]
		action_flag = IDLE;
 8000f84:	220b      	movs	r2, #11
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <action_load+0x258>)
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e740      	b.n	8000e0e <action_load+0x2a>
			memcpy(&temp_config, (uint32_t *)0x08010000, sizeof(ejac_cmd_image_config_t));
 8000f8c:	ad04      	add	r5, sp, #16
 8000f8e:	4e2f      	ldr	r6, [pc, #188]	; (800104c <action_load+0x268>)
 8000f90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f94:	6833      	ldr	r3, [r6, #0]
 8000f96:	802b      	strh	r3, [r5, #0]
			temp_config.ExtraConfig1.FileID = load_cmd.FileId;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <action_load+0x274>)
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			temp_config.ExtraConfig1.Height = load_cmd.Height;
 8000fa0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8000fa4:	9209      	str	r2, [sp, #36]	; 0x24
			temp_config.ExtraConfig1.Width = load_cmd.Width;
 8000fa6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8000faa:	930a      	str	r3, [sp, #40]	; 0x28
			temp_config.ExtraConfig1.BytesPerRow = load_cmd.Width;//(((load_cmd.Width+31)/32)*4);
 8000fac:	930b      	str	r3, [sp, #44]	; 0x2c
			temp_config.ExtraConfig1.FlStartAdr = flash_start_addr[file_id - 1];
 8000fae:	3c01      	subs	r4, #1
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <action_load+0x250>)
 8000fb2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000fb6:	930c      	str	r3, [sp, #48]	; 0x30
			temp_config.ExtraConfig1.FlEndAdr = flash_end_addr[file_id - 1];
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <action_load+0x264>)
 8000fba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8000fc0:	e7b1      	b.n	8000f26 <action_load+0x142>
			memcpy(&temp_config, (uint32_t *)0x08010000, sizeof(ejac_cmd_image_config_t)+sizeof(ejac_image_t));
 8000fc2:	ad04      	add	r5, sp, #16
 8000fc4:	4e21      	ldr	r6, [pc, #132]	; (800104c <action_load+0x268>)
 8000fc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fce:	e896 0003 	ldmia.w	r6, {r0, r1}
 8000fd2:	e885 0003 	stmia.w	r5, {r0, r1}
			temp_config.ExtraConfig2.FileID = load_cmd.FileId;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <action_load+0x274>)
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			temp_config.ExtraConfig2.Height = load_cmd.Height;
 8000fde:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8000fe2:	f8cd 203a 	str.w	r2, [sp, #58]	; 0x3a
			temp_config.ExtraConfig2.Width = load_cmd.Width;
 8000fe6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8000fea:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
			temp_config.ExtraConfig2.BytesPerRow = load_cmd.Width;//(((load_cmd.Width+31)/32)*4);
 8000fee:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
			temp_config.ExtraConfig2.FlStartAdr = flash_start_addr[file_id - 1];
 8000ff2:	3c01      	subs	r4, #1
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <action_load+0x250>)
 8000ff6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000ffa:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
			temp_config.ExtraConfig2.FlEndAdr = flash_end_addr[file_id - 1];
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <action_load+0x264>)
 8001000:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001004:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
 8001008:	e78d      	b.n	8000f26 <action_load+0x142>
			response(FAIL_FLASH);
 800100a:	2003      	movs	r0, #3
 800100c:	f001 f82a 	bl	8002064 <response>
			return;
 8001010:	e6fd      	b.n	8000e0e <action_load+0x2a>
			response(FAIL_FLASH);
 8001012:	2003      	movs	r0, #3
 8001014:	f001 f826 	bl	8002064 <response>
			return;
 8001018:	e6f9      	b.n	8000e0e <action_load+0x2a>
 800101a:	bf00      	nop
 800101c:	20001148 	.word	0x20001148
 8001020:	20000350 	.word	0x20000350
 8001024:	2000111c 	.word	0x2000111c
 8001028:	20000398 	.word	0x20000398
 800102c:	200002e4 	.word	0x200002e4
 8001030:	20001144 	.word	0x20001144
 8001034:	200002f4 	.word	0x200002f4
 8001038:	2000039c 	.word	0x2000039c
 800103c:	200010e2 	.word	0x200010e2
 8001040:	200002f0 	.word	0x200002f0
 8001044:	2000031c 	.word	0x2000031c
 8001048:	200010f0 	.word	0x200010f0
 800104c:	08010000 	.word	0x08010000
 8001050:	2000114c 	.word	0x2000114c
 8001054:	20000354 	.word	0x20000354
 8001058:	200010e4 	.word	0x200010e4

0800105c <action_stop>:

	}
}

void action_stop(void)
{
 800105c:	b538      	push	{r3, r4, r5, lr}
	feed_next_data = 0;
 800105e:	2400      	movs	r4, #0
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <action_stop+0x38>)
 8001062:	701c      	strb	r4, [r3, #0]
	Mode = SETTING;
 8001064:	2001      	movs	r0, #1
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <action_stop+0x3c>)
 8001068:	7018      	strb	r0, [r3, #0]
	EXTI_ClearITPendingBit(EXTI_Line0);
 800106a:	f7ff f91d 	bl	80002a8 <EXTI_ClearITPendingBit>
 800106e:	4d0b      	ldr	r5, [pc, #44]	; (800109c <action_stop+0x40>)
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	NVIC_DisableIRQ(EXTI0_IRQn);
	EXTI_ClearITPendingBit(EXTI_Line1);
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff f916 	bl	80002a8 <EXTI_ClearITPendingBit>
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	NVIC_DisableIRQ(EXTI1_IRQn);
	response(SUCCES);
 8001082:	4620      	mov	r0, r4
 8001084:	f000 ffee 	bl	8002064 <response>
	LatchingDataFlag = 0;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <action_stop+0x44>)
 800108a:	701c      	strb	r4, [r3, #0]
	action_flag = IDLE;
 800108c:	220b      	movs	r2, #11
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <action_stop+0x48>)
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	bd38      	pop	{r3, r4, r5, pc}
 8001094:	200002e9 	.word	0x200002e9
 8001098:	2000031d 	.word	0x2000031d
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	200002e0 	.word	0x200002e0
 80010a4:	200010e2 	.word	0x200010e2

080010a8 <action_image_config>:
	action_flag = START;
	response(SUCCES);
}*/

void action_image_config(void)
{
 80010a8:	b538      	push	{r3, r4, r5, lr}
	if(cmd_count == SIZE_CMD_IMG_CONFIG)
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <action_image_config+0xb4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b16      	cmp	r3, #22
 80010b0:	d000      	beq.n	80010b4 <action_image_config+0xc>
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
	{
		ejac_status_type status;
		uint8_t  * config_ptr, flash_result;
		memcpy(&config_data, (save_buffer+SIZE_CMD), (SIZE_CMD_IMG_CONFIG-SIZE_CMD));
 80010b4:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <action_image_config+0xb8>)
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <action_image_config+0xbc>)
 80010b8:	f853 5f04 	ldr.w	r5, [r3, #4]!
 80010bc:	685c      	ldr	r4, [r3, #4]
 80010be:	6898      	ldr	r0, [r3, #8]
 80010c0:	68d9      	ldr	r1, [r3, #12]
 80010c2:	6015      	str	r5, [r2, #0]
 80010c4:	6054      	str	r4, [r2, #4]
 80010c6:	6090      	str	r0, [r2, #8]
 80010c8:	60d1      	str	r1, [r2, #12]
 80010ca:	8a1b      	ldrh	r3, [r3, #16]
 80010cc:	8213      	strh	r3, [r2, #16]
		config_ptr = (uint8_t *)&config_data;
		FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGPERR | FLASH_FLAG_WRPERR);
 80010ce:	2051      	movs	r0, #81	; 0x51
 80010d0:	f7ff f908 	bl	80002e4 <FLASH_ClearFlag>
		flash_result = flash_sector_erase((uint32_t)CONFIG_ADDR);
 80010d4:	2020      	movs	r0, #32
 80010d6:	f7ff fdcf 	bl	8000c78 <flash_sector_erase>
		if (flash_result == FLASH_FAIL)
 80010da:	2801      	cmp	r0, #1
 80010dc:	d01d      	beq.n	800111a <action_image_config+0x72>
		{
			response(FAIL_FLASH);
			return;
		}
		flash_result = flash_write(config_ptr, (SIZE_CMD_IMG_CONFIG-SIZE_CMD), (uint32_t)0x08010000);
 80010de:	4a22      	ldr	r2, [pc, #136]	; (8001168 <action_image_config+0xc0>)
 80010e0:	2112      	movs	r1, #18
 80010e2:	481f      	ldr	r0, [pc, #124]	; (8001160 <action_image_config+0xb8>)
 80010e4:	f7ff fda8 	bl	8000c38 <flash_write>
 80010e8:	b2c0      	uxtb	r0, r0
		if (flash_result == FLASH_FAIL)
 80010ea:	2801      	cmp	r0, #1
 80010ec:	d019      	beq.n	8001122 <action_image_config+0x7a>
		{
			response(FAIL_FLASH);
			return;
		}
		if(config_data.ImageCount == 1)
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <action_image_config+0xb8>)
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d019      	beq.n	800112a <action_image_config+0x82>
		{
			line_count2 = -1; line_count3 = -1; line_count4 = -1;
		}
		else if(config_data.ImageCount == 2)
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d020      	beq.n	800113c <action_image_config+0x94>
		{
			line_count3 = -1; line_count4 = -1;
		}
		else if(config_data.ImageCount == 3)
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d025      	beq.n	800114a <action_image_config+0xa2>
		{
			line_count4 = -1;
		}
		g_curr_line = 0;
 80010fe:	2200      	movs	r2, #0
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <action_image_config+0xc4>)
 8001102:	601a      	str	r2, [r3, #0]
		status = erase_flash();
 8001104:	f001 f8f6 	bl	80022f4 <erase_flash>
		if(status == SUCCES)
 8001108:	b320      	cbz	r0, 8001154 <action_image_config+0xac>
		{
			response(SUCCES);
		}
		else if((status == FAIL_FLASH) || (status == FAIL))
 800110a:	1e83      	subs	r3, r0, #2
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d8cf      	bhi.n	80010b2 <action_image_config+0xa>
		{
			response(FAIL_FLASH);
 8001112:	2003      	movs	r0, #3
 8001114:	f000 ffa6 	bl	8002064 <response>
 8001118:	e7cb      	b.n	80010b2 <action_image_config+0xa>
			response(FAIL_FLASH);
 800111a:	2003      	movs	r0, #3
 800111c:	f000 ffa2 	bl	8002064 <response>
			return;
 8001120:	bd38      	pop	{r3, r4, r5, pc}
			response(FAIL_FLASH);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 ff9e 	bl	8002064 <response>
			return;
 8001128:	bd38      	pop	{r3, r4, r5, pc}
			line_count2 = -1; line_count3 = -1; line_count4 = -1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <action_image_config+0xc8>)
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <action_image_config+0xcc>)
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <action_image_config+0xd0>)
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e7e0      	b.n	80010fe <action_image_config+0x56>
			line_count3 = -1; line_count4 = -1;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <action_image_config+0xcc>)
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <action_image_config+0xd0>)
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e7d9      	b.n	80010fe <action_image_config+0x56>
			line_count4 = -1;
 800114a:	f04f 32ff 	mov.w	r2, #4294967295
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <action_image_config+0xd0>)
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e7d4      	b.n	80010fe <action_image_config+0x56>
			response(SUCCES);
 8001154:	f000 ff86 	bl	8002064 <response>
 8001158:	bd38      	pop	{r3, r4, r5, pc}
 800115a:	bf00      	nop
 800115c:	2000111c 	.word	0x2000111c
 8001160:	2000114c 	.word	0x2000114c
 8001164:	20000398 	.word	0x20000398
 8001168:	08010000 	.word	0x08010000
 800116c:	20001160 	.word	0x20001160
 8001170:	20001114 	.word	0x20001114
 8001174:	200010dc 	.word	0x200010dc
 8001178:	2000034c 	.word	0x2000034c

0800117c <action_hardware_config>:
	}
}

void action_hardware_config(void)
{
	if(cmd_count == SIZE_CMD_HW_CONFIG)
 800117c:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <action_hardware_config+0x124>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b2d      	cmp	r3, #45	; 0x2d
 8001182:	d000      	beq.n	8001186 <action_hardware_config+0xa>
 8001184:	4770      	bx	lr
{
 8001186:	b570      	push	{r4, r5, r6, lr}
	{
		disable_sensors();
 8001188:	f7ff fb10 	bl	80007ac <disable_sensors>
		uint8_t  * config_ptr, flash_result;
		memcpy(&config_hw, (save_buffer+SIZE_CMD), (SIZE_CMD_HW_CONFIG-SIZE_CMD));
 800118c:	4945      	ldr	r1, [pc, #276]	; (80012a4 <action_hardware_config+0x128>)
 800118e:	1d0b      	adds	r3, r1, #4
 8001190:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <action_hardware_config+0x12c>)
 8001192:	3124      	adds	r1, #36	; 0x24
 8001194:	681e      	ldr	r6, [r3, #0]
 8001196:	685d      	ldr	r5, [r3, #4]
 8001198:	689c      	ldr	r4, [r3, #8]
 800119a:	68d8      	ldr	r0, [r3, #12]
 800119c:	6016      	str	r6, [r2, #0]
 800119e:	6055      	str	r5, [r2, #4]
 80011a0:	6094      	str	r4, [r2, #8]
 80011a2:	60d0      	str	r0, [r2, #12]
 80011a4:	3310      	adds	r3, #16
 80011a6:	3210      	adds	r2, #16
 80011a8:	428b      	cmp	r3, r1
 80011aa:	d1f3      	bne.n	8001194 <action_hardware_config+0x18>
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	6859      	ldr	r1, [r3, #4]
 80011b0:	6010      	str	r0, [r2, #0]
 80011b2:	6051      	str	r1, [r2, #4]
 80011b4:	7a1b      	ldrb	r3, [r3, #8]
 80011b6:	7213      	strb	r3, [r2, #8]
		config_ptr = (uint8_t *)&config_hw;
		FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGPERR | FLASH_FLAG_WRPERR);
 80011b8:	2051      	movs	r0, #81	; 0x51
 80011ba:	f7ff f893 	bl	80002e4 <FLASH_ClearFlag>
		flash_result = flash_sector_erase((uint32_t)HW_ADDR);
 80011be:	2018      	movs	r0, #24
 80011c0:	f7ff fd5a 	bl	8000c78 <flash_sector_erase>
		if (flash_result == FLASH_FAIL)
 80011c4:	2801      	cmp	r0, #1
 80011c6:	d01d      	beq.n	8001204 <action_hardware_config+0x88>
		{
			response(FAIL_FLASH);
			return;
		}
		flash_result = flash_write(config_ptr, (SIZE_CMD_HW_CONFIG-SIZE_CMD), (uint32_t)0x0800C000);
 80011c8:	4a38      	ldr	r2, [pc, #224]	; (80012ac <action_hardware_config+0x130>)
 80011ca:	2129      	movs	r1, #41	; 0x29
 80011cc:	4836      	ldr	r0, [pc, #216]	; (80012a8 <action_hardware_config+0x12c>)
 80011ce:	f7ff fd33 	bl	8000c38 <flash_write>
 80011d2:	b2c0      	uxtb	r0, r0
		if (flash_result == FLASH_FAIL)
 80011d4:	2801      	cmp	r0, #1
 80011d6:	d019      	beq.n	800120c <action_hardware_config+0x90>
		{
			response(FAIL_FLASH);
			return;
		}

		if(config_hw.Sensor1.Sensor_Status == EJAC_ENABLE)
 80011d8:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <action_hardware_config+0x12c>)
 80011da:	791b      	ldrb	r3, [r3, #4]
 80011dc:	bb03      	cbnz	r3, 8001220 <action_hardware_config+0xa4>
		{
			if(config_hw.Sensor1.Sensor_Type == NPN)
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <action_hardware_config+0x12c>)
 80011e0:	789b      	ldrb	r3, [r3, #2]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d016      	beq.n	8001214 <action_hardware_config+0x98>
			{
				sensor1_npn_init();
			}
			else if(config_hw.Sensor1.Sensor_Type == PNP)
 80011e6:	b1c3      	cbz	r3, 800121a <action_hardware_config+0x9e>
			//TODO:
			EXTI_ClearITPendingBit(EXTI_Line0);
			NVIC_DisableIRQ(EXTI0_IRQn);
		}

		if(config_hw.Sensor2.Sensor_Status == EJAC_ENABLE)
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <action_hardware_config+0x12c>)
 80011ea:	79db      	ldrb	r3, [r3, #7]
 80011ec:	bb33      	cbnz	r3, 800123c <action_hardware_config+0xc0>
		{
			if(config_hw.Sensor2.Sensor_Type == NPN)
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <action_hardware_config+0x12c>)
 80011f0:	795b      	ldrb	r3, [r3, #5]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d01c      	beq.n	8001230 <action_hardware_config+0xb4>
			{
				sensor2_npn_init();
			}
			else if(config_hw.Sensor2.Sensor_Type == PNP)
 80011f6:	b1f3      	cbz	r3, 8001236 <action_hardware_config+0xba>
			{
				sensor3_pnp_init();
			}
		}
#endif
		act_cols = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <action_hardware_config+0x134>)
 80011fc:	7013      	strb	r3, [r2, #0]
		act_rows = 0;
 80011fe:	4a2d      	ldr	r2, [pc, #180]	; (80012b4 <action_hardware_config+0x138>)
 8001200:	7013      	strb	r3, [r2, #0]

		uint8_t act_count;
		for(act_count = 0; act_count < config_hw.MaxRows; act_count++)
 8001202:	e025      	b.n	8001250 <action_hardware_config+0xd4>
			response(FAIL_FLASH);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 ff2d 	bl	8002064 <response>
			return;
 800120a:	bd70      	pop	{r4, r5, r6, pc}
			response(FAIL_FLASH);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 ff29 	bl	8002064 <response>
			return;
 8001212:	bd70      	pop	{r4, r5, r6, pc}
				sensor1_npn_init();
 8001214:	f7ff fb7b 	bl	800090e <sensor1_npn_init>
 8001218:	e7e6      	b.n	80011e8 <action_hardware_config+0x6c>
				sensor1_pnp_init();
 800121a:	f7ff fb5d 	bl	80008d8 <sensor1_pnp_init>
 800121e:	e7e3      	b.n	80011e8 <action_hardware_config+0x6c>
			EXTI_ClearITPendingBit(EXTI_Line0);
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff f841 	bl	80002a8 <EXTI_ClearITPendingBit>
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <action_hardware_config+0x13c>)
 800122a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800122e:	e7db      	b.n	80011e8 <action_hardware_config+0x6c>
				sensor2_npn_init();
 8001230:	f7ff fba4 	bl	800097c <sensor2_npn_init>
 8001234:	e7e0      	b.n	80011f8 <action_hardware_config+0x7c>
				sensor2_pnp_init();
 8001236:	f7ff fb85 	bl	8000944 <sensor2_pnp_init>
 800123a:	e7dd      	b.n	80011f8 <action_hardware_config+0x7c>
			EXTI_ClearITPendingBit(EXTI_Line1);
 800123c:	2002      	movs	r0, #2
 800123e:	f7ff f833 	bl	80002a8 <EXTI_ClearITPendingBit>
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <action_hardware_config+0x13c>)
 8001246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800124a:	e7d5      	b.n	80011f8 <action_hardware_config+0x7c>
		for(act_count = 0; act_count < config_hw.MaxRows; act_count++)
 800124c:	3301      	adds	r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <action_hardware_config+0x12c>)
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	4293      	cmp	r3, r2
 8001256:	d209      	bcs.n	800126c <action_hardware_config+0xf0>
		{
			if(config_hw.ActiveRows[act_count])
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <action_hardware_config+0x12c>)
 800125a:	441a      	add	r2, r3
 800125c:	7a52      	ldrb	r2, [r2, #9]
 800125e:	2a00      	cmp	r2, #0
 8001260:	d0f4      	beq.n	800124c <action_hardware_config+0xd0>
			{
				act_rows++;
 8001262:	4914      	ldr	r1, [pc, #80]	; (80012b4 <action_hardware_config+0x138>)
 8001264:	780a      	ldrb	r2, [r1, #0]
 8001266:	3201      	adds	r2, #1
 8001268:	700a      	strb	r2, [r1, #0]
 800126a:	e7ef      	b.n	800124c <action_hardware_config+0xd0>
 800126c:	2300      	movs	r3, #0
 800126e:	e001      	b.n	8001274 <action_hardware_config+0xf8>
			}
		}
		for(act_count = 0; act_count < config_hw.MaxColumns; act_count++)
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <action_hardware_config+0x12c>)
 8001276:	7852      	ldrb	r2, [r2, #1]
 8001278:	4293      	cmp	r3, r2
 800127a:	d209      	bcs.n	8001290 <action_hardware_config+0x114>
		{
			if(config_hw.ActiveColumns[act_count])
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <action_hardware_config+0x12c>)
 800127e:	441a      	add	r2, r3
 8001280:	7e52      	ldrb	r2, [r2, #25]
 8001282:	2a00      	cmp	r2, #0
 8001284:	d0f4      	beq.n	8001270 <action_hardware_config+0xf4>
			{
				act_cols++;
 8001286:	490a      	ldr	r1, [pc, #40]	; (80012b0 <action_hardware_config+0x134>)
 8001288:	780a      	ldrb	r2, [r1, #0]
 800128a:	3201      	adds	r2, #1
 800128c:	700a      	strb	r2, [r1, #0]
 800128e:	e7ef      	b.n	8001270 <action_hardware_config+0xf4>
			}
		}

		response(SUCCES);
 8001290:	2000      	movs	r0, #0
 8001292:	f000 fee7 	bl	8002064 <response>
		hrdwrSettingsDone = 1;
 8001296:	2201      	movs	r2, #1
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <action_hardware_config+0x140>)
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	bf00      	nop
 80012a0:	2000111c 	.word	0x2000111c
 80012a4:	20000398 	.word	0x20000398
 80012a8:	20000320 	.word	0x20000320
 80012ac:	0800c000 	.word	0x0800c000
 80012b0:	200010e1 	.word	0x200010e1
 80012b4:	200002e8 	.word	0x200002e8
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	200002e1 	.word	0x200002e1

080012c0 <action_image_info>:
	}
}

void action_image_info(void)
{
	if(cmd_count == sizeof(ejac_cmd_image_order_t))
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <action_image_info+0xa4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b3c      	cmp	r3, #60	; 0x3c
 80012c6:	d000      	beq.n	80012ca <action_image_info+0xa>
 80012c8:	4770      	bx	lr
{
 80012ca:	b570      	push	{r4, r5, r6, lr}
	{
		uint8_t  *config_ptr, flash_result;
		memcpy(&image_order, (save_buffer+SIZE_CMD), sizeof(ejac_cmd_image_order_t));
 80012cc:	4926      	ldr	r1, [pc, #152]	; (8001368 <action_image_info+0xa8>)
 80012ce:	1d0b      	adds	r3, r1, #4
 80012d0:	4a26      	ldr	r2, [pc, #152]	; (800136c <action_image_info+0xac>)
 80012d2:	3134      	adds	r1, #52	; 0x34
 80012d4:	681e      	ldr	r6, [r3, #0]
 80012d6:	685d      	ldr	r5, [r3, #4]
 80012d8:	689c      	ldr	r4, [r3, #8]
 80012da:	68d8      	ldr	r0, [r3, #12]
 80012dc:	6016      	str	r6, [r2, #0]
 80012de:	6055      	str	r5, [r2, #4]
 80012e0:	6094      	str	r4, [r2, #8]
 80012e2:	60d0      	str	r0, [r2, #12]
 80012e4:	3310      	adds	r3, #16
 80012e6:	3210      	adds	r2, #16
 80012e8:	428b      	cmp	r3, r1
 80012ea:	d1f3      	bne.n	80012d4 <action_image_info+0x14>
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	6010      	str	r0, [r2, #0]
 80012f4:	6051      	str	r1, [r2, #4]
 80012f6:	6093      	str	r3, [r2, #8]
		config_ptr = (uint8_t *)&image_order;
		FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGPERR | FLASH_FLAG_WRPERR);
 80012f8:	2051      	movs	r0, #81	; 0x51
 80012fa:	f7fe fff3 	bl	80002e4 <FLASH_ClearFlag>
		flash_result = flash_sector_erase((uint32_t)IMAGE_ORDER);
 80012fe:	2058      	movs	r0, #88	; 0x58
 8001300:	f7ff fcba 	bl	8000c78 <flash_sector_erase>
		if (flash_result == FLASH_FAIL)
 8001304:	2801      	cmp	r0, #1
 8001306:	d009      	beq.n	800131c <action_image_info+0x5c>
		{
			response(FAIL_FLASH);
			return;
		}

		flash_result = flash_write(config_ptr, sizeof(ejac_cmd_image_order_t), (uint32_t)0x080E0000);
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <action_image_info+0xb0>)
 800130a:	213c      	movs	r1, #60	; 0x3c
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <action_image_info+0xac>)
 800130e:	f7ff fc93 	bl	8000c38 <flash_write>
 8001312:	b2c0      	uxtb	r0, r0
		if (flash_result == FLASH_FAIL)
 8001314:	2801      	cmp	r0, #1
 8001316:	d005      	beq.n	8001324 <action_image_info+0x64>
 8001318:	2300      	movs	r3, #0
 800131a:	e00d      	b.n	8001338 <action_image_info+0x78>
			response(FAIL_FLASH);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 fea1 	bl	8002064 <response>
			return;
 8001322:	bd70      	pop	{r4, r5, r6, pc}
		{
			response(FAIL_FLASH);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 fe9d 	bl	8002064 <response>
			return;
 800132a:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t act_count;
		for(act_count = 0; act_count < 	10; act_count++)
		{
			if(image_order.ImgOrder[act_count].BBType == BORDER)
			{
				border_count++;
 800132c:	4911      	ldr	r1, [pc, #68]	; (8001374 <action_image_info+0xb4>)
 800132e:	780a      	ldrb	r2, [r1, #0]
 8001330:	3201      	adds	r2, #1
 8001332:	700a      	strb	r2, [r1, #0]
		for(act_count = 0; act_count < 	10; act_count++)
 8001334:	3301      	adds	r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b09      	cmp	r3, #9
 800133a:	d80e      	bhi.n	800135a <action_image_info+0x9a>
			if(image_order.ImgOrder[act_count].BBType == BORDER)
 800133c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001340:	0051      	lsls	r1, r2, #1
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <action_image_info+0xac>)
 8001344:	440a      	add	r2, r1
 8001346:	7952      	ldrb	r2, [r2, #5]
 8001348:	2a28      	cmp	r2, #40	; 0x28
 800134a:	d0ef      	beq.n	800132c <action_image_info+0x6c>
			}
			else if(image_order.ImgOrder[act_count].BBType == BODY)
 800134c:	2a29      	cmp	r2, #41	; 0x29
 800134e:	d1f1      	bne.n	8001334 <action_image_info+0x74>
			{
				body_count++;
 8001350:	4909      	ldr	r1, [pc, #36]	; (8001378 <action_image_info+0xb8>)
 8001352:	780a      	ldrb	r2, [r1, #0]
 8001354:	3201      	adds	r2, #1
 8001356:	700a      	strb	r2, [r1, #0]
 8001358:	e7ec      	b.n	8001334 <action_image_info+0x74>
			}
		}

		response(SUCCES);
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fe82 	bl	8002064 <response>
 8001360:	bd70      	pop	{r4, r5, r6, pc}
 8001362:	bf00      	nop
 8001364:	2000111c 	.word	0x2000111c
 8001368:	20000398 	.word	0x20000398
 800136c:	20000f9c 	.word	0x20000f9c
 8001370:	080e0000 	.word	0x080e0000
 8001374:	20001164 	.word	0x20001164
 8001378:	2000113c 	.word	0x2000113c

0800137c <action_img_detail_status>:
	}
}

void action_img_detail_status(void)
{
 800137c:	b508      	push	{r3, lr}
	response(SUCCES);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 fe70 	bl	8002064 <response>
 8001384:	bd08      	pop	{r3, pc}

08001386 <action_hw_detail_status>:
}

void action_hw_detail_status(void)
{
 8001386:	b508      	push	{r3, lr}
	response(SUCCES);
 8001388:	2000      	movs	r0, #0
 800138a:	f000 fe6b 	bl	8002064 <response>
 800138e:	bd08      	pop	{r3, pc}

08001390 <jari_complement>:

void jari_complement(uint8_t *arr, int16_t size)
{
	int16_t iter = 0;

	for (iter = 0;iter < size; iter++)
 8001390:	2300      	movs	r3, #0
 8001392:	e004      	b.n	800139e <jari_complement+0xe>
	{
		arr[iter] = ~(arr[iter]);
 8001394:	5cc2      	ldrb	r2, [r0, r3]
 8001396:	43d2      	mvns	r2, r2
 8001398:	54c2      	strb	r2, [r0, r3]
	for (iter = 0;iter < size; iter++)
 800139a:	3301      	adds	r3, #1
 800139c:	b21b      	sxth	r3, r3
 800139e:	428b      	cmp	r3, r1
 80013a0:	dbf8      	blt.n	8001394 <jari_complement+0x4>
	}
}
 80013a2:	4770      	bx	lr

080013a4 <pattern_test>:


void pattern_test(void)
{
 80013a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a8:	b083      	sub	sp, #12
	if( (act_cols == 0) || (act_rows == 0))
 80013aa:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <pattern_test+0x20c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b113      	cbz	r3, 80013b6 <pattern_test+0x12>
 80013b0:	4b80      	ldr	r3, [pc, #512]	; (80015b4 <pattern_test+0x210>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b933      	cbnz	r3, 80013c4 <pattern_test+0x20>
	{
		act_cols = config_hw.MaxColumns;
 80013b6:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <pattern_test+0x214>)
 80013b8:	7859      	ldrb	r1, [r3, #1]
 80013ba:	4a7d      	ldr	r2, [pc, #500]	; (80015b0 <pattern_test+0x20c>)
 80013bc:	7011      	strb	r1, [r2, #0]
		act_rows = config_hw.MaxRows;
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <pattern_test+0x210>)
 80013c2:	701a      	strb	r2, [r3, #0]

	uint8_t addr, cl_cards,idx_count = 0,cl_count = 0, idx;
	uint8_t data_port,clk_port;
    uint8_t data_pin,clk_pin;

    if((test_pattern.testType == 'j') && (g_curr_line % 2))
 80013c4:	4b7d      	ldr	r3, [pc, #500]	; (80015bc <pattern_test+0x218>)
 80013c6:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80013ca:	2b6a      	cmp	r3, #106	; 0x6a
 80013cc:	d017      	beq.n	80013fe <pattern_test+0x5a>
	{
		jari_complement(test_pattern.Pattern, 120);
	}
	else if((test_pattern.testType == 'j') && (g_curr_line != 0))
 80013ce:	2b6a      	cmp	r3, #106	; 0x6a
 80013d0:	d01f      	beq.n	8001412 <pattern_test+0x6e>
	{
		jari_complement(test_pattern.Pattern, 120);
	}

    /*Enabling demux which controls FRC Port Selection*/
    MUX_LOW;
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d8:	4879      	ldr	r0, [pc, #484]	; (80015c0 <pattern_test+0x21c>)
 80013da:	f7ff f868 	bl	80004ae <GPIO_WriteBit>
	if(g_curr_line < test_pattern.Rep)
 80013de:	4b77      	ldr	r3, [pc, #476]	; (80015bc <pattern_test+0x218>)
 80013e0:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 80013e4:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <pattern_test+0x220>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f240 809a 	bls.w	8001522 <pattern_test+0x17e>
	{
		//MJN Where we taking pattern from testapplication
		//memcpy(cl_line, test_pattern.Pattern, (act_cols * act_rows));
		GPIO_ResetBits(GPIOA, OE_PIN);
 80013ee:	2110      	movs	r1, #16
 80013f0:	4875      	ldr	r0, [pc, #468]	; (80015c8 <pattern_test+0x224>)
 80013f2:	f7ff f85a 	bl	80004aa <GPIO_ResetBits>
	uint8_t addr, cl_cards,idx_count = 0,cl_count = 0, idx;
 80013f6:	f04f 0a00 	mov.w	sl, #0

		for (addr = 0; addr < config_hw.MaxColumns; addr++)
 80013fa:	46d1      	mov	r9, sl
 80013fc:	e044      	b.n	8001488 <pattern_test+0xe4>
    if((test_pattern.testType == 'j') && (g_curr_line % 2))
 80013fe:	4a71      	ldr	r2, [pc, #452]	; (80015c4 <pattern_test+0x220>)
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	f012 0f01 	tst.w	r2, #1
 8001406:	d0e2      	beq.n	80013ce <pattern_test+0x2a>
		jari_complement(test_pattern.Pattern, 120);
 8001408:	2178      	movs	r1, #120	; 0x78
 800140a:	486c      	ldr	r0, [pc, #432]	; (80015bc <pattern_test+0x218>)
 800140c:	f7ff ffc0 	bl	8001390 <jari_complement>
 8001410:	e7df      	b.n	80013d2 <pattern_test+0x2e>
	else if((test_pattern.testType == 'j') && (g_curr_line != 0))
 8001412:	4b6c      	ldr	r3, [pc, #432]	; (80015c4 <pattern_test+0x220>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0db      	beq.n	80013d2 <pattern_test+0x2e>
		jari_complement(test_pattern.Pattern, 120);
 800141a:	2178      	movs	r1, #120	; 0x78
 800141c:	4867      	ldr	r0, [pc, #412]	; (80015bc <pattern_test+0x218>)
 800141e:	f7ff ffb7 	bl	8001390 <jari_complement>
 8001422:	e7d6      	b.n	80013d2 <pattern_test+0x2e>
							//latch_data_byte(test_pattern.Pattern[idx]);
							latch_data_byte(test_pattern.Pattern[idx],data_port,data_pin,clk_port,clk_pin);
						}
						else
						{
							latch_data_byte(0x00, data_port,data_pin,clk_port,clk_pin);
 8001424:	9500      	str	r5, [sp, #0]
 8001426:	4633      	mov	r3, r6
 8001428:	463a      	mov	r2, r7
 800142a:	4641      	mov	r1, r8
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fbb9 	bl	8000ba4 <latch_data_byte>
						}
						cl_count--;
 8001432:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001436:	fa5f fb8b 	uxtb.w	fp, fp
					for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 800143a:	3401      	adds	r4, #1
 800143c:	b2e4      	uxtb	r4, r4
 800143e:	4b5e      	ldr	r3, [pc, #376]	; (80015b8 <pattern_test+0x214>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	429c      	cmp	r4, r3
 8001444:	d214      	bcs.n	8001470 <pattern_test+0xcc>
						if(config_hw.ActiveRows[cl_cards])
 8001446:	4b5c      	ldr	r3, [pc, #368]	; (80015b8 <pattern_test+0x214>)
 8001448:	4423      	add	r3, r4
 800144a:	7a5b      	ldrb	r3, [r3, #9]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0e9      	beq.n	8001424 <pattern_test+0x80>
							idx = (idx_count * act_rows) + cl_count;
 8001450:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <pattern_test+0x210>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	fb13 f30a 	smulbb	r3, r3, sl
 8001458:	fa5b f383 	uxtab	r3, fp, r3
 800145c:	b2db      	uxtb	r3, r3
							latch_data_byte(test_pattern.Pattern[idx],data_port,data_pin,clk_port,clk_pin);
 800145e:	4a57      	ldr	r2, [pc, #348]	; (80015bc <pattern_test+0x218>)
 8001460:	5cd0      	ldrb	r0, [r2, r3]
 8001462:	9500      	str	r5, [sp, #0]
 8001464:	4633      	mov	r3, r6
 8001466:	463a      	mov	r2, r7
 8001468:	4641      	mov	r1, r8
 800146a:	f7ff fb9b 	bl	8000ba4 <latch_data_byte>
 800146e:	e7e0      	b.n	8001432 <pattern_test+0x8e>
					}
					idx_count++;
 8001470:	f10a 0a01 	add.w	sl, sl, #1
 8001474:	fa5f fa8a 	uxtb.w	sl, sl
					GPIO_ResetBits(GPIOA, OE_PIN);
 8001478:	2110      	movs	r1, #16
 800147a:	4853      	ldr	r0, [pc, #332]	; (80015c8 <pattern_test+0x224>)
 800147c:	f7ff f815 	bl	80004aa <GPIO_ResetBits>
		for (addr = 0; addr < config_hw.MaxColumns; addr++)
 8001480:	f109 0901 	add.w	r9, r9, #1
 8001484:	fa5f f989 	uxtb.w	r9, r9
 8001488:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <pattern_test+0x214>)
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	4599      	cmp	r9, r3
 800148e:	d23b      	bcs.n	8001508 <pattern_test+0x164>
			data_port = data_pins[addr][1];
 8001490:	484e      	ldr	r0, [pc, #312]	; (80015cc <pattern_test+0x228>)
 8001492:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8001496:	18c2      	adds	r2, r0, r3
 8001498:	f892 8001 	ldrb.w	r8, [r2, #1]
			clk_port = clock_pins[addr][1];
 800149c:	4d4c      	ldr	r5, [pc, #304]	; (80015d0 <pattern_test+0x22c>)
 800149e:	18ea      	adds	r2, r5, r3
 80014a0:	7856      	ldrb	r6, [r2, #1]
			data_pin = (uint8_t)atoi(&data_pins[addr][2]);
 80014a2:	1c9c      	adds	r4, r3, #2
 80014a4:	4420      	add	r0, r4
 80014a6:	f000 ff4d 	bl	8002344 <atoi>
 80014aa:	b2c7      	uxtb	r7, r0
			clk_pin = (uint8_t)atoi(&clock_pins[addr][2]);
 80014ac:	1928      	adds	r0, r5, r4
 80014ae:	f000 ff49 	bl	8002344 <atoi>
 80014b2:	b2c5      	uxtb	r5, r0
			if(config_hw.ActiveColumns[config_data.LogicColumns[addr]])
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <pattern_test+0x230>)
 80014b6:	444b      	add	r3, r9
 80014b8:	7898      	ldrb	r0, [r3, #2]
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <pattern_test+0x214>)
 80014bc:	4403      	add	r3, r0
 80014be:	7e5c      	ldrb	r4, [r3, #25]
 80014c0:	b14c      	cbz	r4, 80014d6 <pattern_test+0x132>
					latch_addr_byte(config_data.LogicColumns[addr]);
 80014c2:	f7ff fb17 	bl	8000af4 <latch_addr_byte>
					GPIO_SetBits(GPIOA, OE_PIN);
 80014c6:	2110      	movs	r1, #16
 80014c8:	483f      	ldr	r0, [pc, #252]	; (80015c8 <pattern_test+0x224>)
 80014ca:	f7fe ffec 	bl	80004a6 <GPIO_SetBits>
					cl_count = 11;
 80014ce:	f04f 0b0b 	mov.w	fp, #11
					for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 80014d2:	2400      	movs	r4, #0
 80014d4:	e7b3      	b.n	800143e <pattern_test+0x9a>
			}
			else
			{
					latch_addr_byte(config_data.LogicColumns[addr]);
 80014d6:	f7ff fb0d 	bl	8000af4 <latch_addr_byte>
					GPIO_SetBits(GPIOA, OE_PIN);
 80014da:	2110      	movs	r1, #16
 80014dc:	483a      	ldr	r0, [pc, #232]	; (80015c8 <pattern_test+0x224>)
 80014de:	f7fe ffe2 	bl	80004a6 <GPIO_SetBits>
					for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 80014e2:	e008      	b.n	80014f6 <pattern_test+0x152>
					{
						latch_data_byte(0x00, data_port,data_pin,clk_port,clk_pin);
 80014e4:	9500      	str	r5, [sp, #0]
 80014e6:	4633      	mov	r3, r6
 80014e8:	463a      	mov	r2, r7
 80014ea:	4641      	mov	r1, r8
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fb59 	bl	8000ba4 <latch_data_byte>
					for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 80014f2:	3401      	adds	r4, #1
 80014f4:	b2e4      	uxtb	r4, r4
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <pattern_test+0x214>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	429c      	cmp	r4, r3
 80014fc:	d3f2      	bcc.n	80014e4 <pattern_test+0x140>
					}
					GPIO_ResetBits(GPIOA, OE_PIN);
 80014fe:	2110      	movs	r1, #16
 8001500:	4831      	ldr	r0, [pc, #196]	; (80015c8 <pattern_test+0x224>)
 8001502:	f7fe ffd2 	bl	80004aa <GPIO_ResetBits>
 8001506:	e7bb      	b.n	8001480 <pattern_test+0xdc>
			}
		}
		g_curr_line++;
 8001508:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <pattern_test+0x220>)
 800150a:	6813      	ldr	r3, [r2, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	6013      	str	r3, [r2, #0]
		}
		g_curr_line = 0;
		action_flag = IDLE;
		LatchingDataFlag = 0;
	}
	MUX_HIGH;
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001516:	482a      	ldr	r0, [pc, #168]	; (80015c0 <pattern_test+0x21c>)
 8001518:	f7fe ffc9 	bl	80004ae <GPIO_WriteBit>
}
 800151c:	b003      	add	sp, #12
 800151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		GPIO_ResetBits(GPIOA, OE_PIN);
 8001522:	2110      	movs	r1, #16
 8001524:	4828      	ldr	r0, [pc, #160]	; (80015c8 <pattern_test+0x224>)
 8001526:	f7fe ffc0 	bl	80004aa <GPIO_ResetBits>
		for (addr = 0; addr < config_hw.MaxColumns; addr++)
 800152a:	f04f 0900 	mov.w	r9, #0
 800152e:	e014      	b.n	800155a <pattern_test+0x1b6>
						latch_data_byte(0x00, data_port,data_pin,clk_port,clk_pin);
 8001530:	9500      	str	r5, [sp, #0]
 8001532:	463b      	mov	r3, r7
 8001534:	4632      	mov	r2, r6
 8001536:	4641      	mov	r1, r8
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fb33 	bl	8000ba4 <latch_data_byte>
						cl_count++;
 800153e:	3401      	adds	r4, #1
 8001540:	b2e4      	uxtb	r4, r4
				for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <pattern_test+0x214>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	429c      	cmp	r4, r3
 8001548:	d3f2      	bcc.n	8001530 <pattern_test+0x18c>
				GPIO_ResetBits(GPIOA, OE_PIN);
 800154a:	2110      	movs	r1, #16
 800154c:	481e      	ldr	r0, [pc, #120]	; (80015c8 <pattern_test+0x224>)
 800154e:	f7fe ffac 	bl	80004aa <GPIO_ResetBits>
		for (addr = 0; addr < config_hw.MaxColumns; addr++)
 8001552:	f109 0901 	add.w	r9, r9, #1
 8001556:	fa5f f989 	uxtb.w	r9, r9
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <pattern_test+0x214>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	4599      	cmp	r9, r3
 8001560:	d21c      	bcs.n	800159c <pattern_test+0x1f8>
				latch_addr_byte(config_data.LogicColumns[addr]);
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <pattern_test+0x230>)
 8001564:	444b      	add	r3, r9
 8001566:	7898      	ldrb	r0, [r3, #2]
 8001568:	f7ff fac4 	bl	8000af4 <latch_addr_byte>
				GPIO_SetBits(GPIOA, OE_PIN);
 800156c:	2110      	movs	r1, #16
 800156e:	4816      	ldr	r0, [pc, #88]	; (80015c8 <pattern_test+0x224>)
 8001570:	f7fe ff99 	bl	80004a6 <GPIO_SetBits>
				data_port = data_pins[addr][1];
 8001574:	4815      	ldr	r0, [pc, #84]	; (80015cc <pattern_test+0x228>)
 8001576:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 800157a:	18c2      	adds	r2, r0, r3
 800157c:	f892 8001 	ldrb.w	r8, [r2, #1]
				clk_port = clock_pins[addr][1];
 8001580:	4d13      	ldr	r5, [pc, #76]	; (80015d0 <pattern_test+0x22c>)
 8001582:	18ea      	adds	r2, r5, r3
 8001584:	7857      	ldrb	r7, [r2, #1]
				data_pin = (uint8_t)atoi(&data_pins[addr][2]);
 8001586:	1c9c      	adds	r4, r3, #2
 8001588:	4420      	add	r0, r4
 800158a:	f000 fedb 	bl	8002344 <atoi>
 800158e:	b2c6      	uxtb	r6, r0
				clk_pin = (uint8_t)atoi(&clock_pins[addr][2]);
 8001590:	1928      	adds	r0, r5, r4
 8001592:	f000 fed7 	bl	8002344 <atoi>
 8001596:	b2c5      	uxtb	r5, r0
				for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 8001598:	2400      	movs	r4, #0
 800159a:	e7d2      	b.n	8001542 <pattern_test+0x19e>
		g_curr_line = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <pattern_test+0x220>)
 80015a0:	6013      	str	r3, [r2, #0]
		action_flag = IDLE;
 80015a2:	210b      	movs	r1, #11
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <pattern_test+0x234>)
 80015a6:	7011      	strb	r1, [r2, #0]
		LatchingDataFlag = 0;
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <pattern_test+0x238>)
 80015aa:	7013      	strb	r3, [r2, #0]
 80015ac:	e7b0      	b.n	8001510 <pattern_test+0x16c>
 80015ae:	bf00      	nop
 80015b0:	200010e1 	.word	0x200010e1
 80015b4:	200002e8 	.word	0x200002e8
 80015b8:	20000320 	.word	0x20000320
 80015bc:	20000fd8 	.word	0x20000fd8
 80015c0:	40020400 	.word	0x40020400
 80015c4:	20001160 	.word	0x20001160
 80015c8:	40020000 	.word	0x40020000
 80015cc:	200000a0 	.word	0x200000a0
 80015d0:	20000050 	.word	0x20000050
 80015d4:	2000114c 	.word	0x2000114c
 80015d8:	200010e2 	.word	0x200010e2
 80015dc:	200002e0 	.word	0x200002e0

080015e0 <vert_distribution>:
       for (i=0; i< no_of_bytes; i++)
               Bytes[i] = reverseBits(Bytes[i]);
       return;
}
void vert_distribution(uint8_t * pixel_buffer, uint32_t BytesPerRow)
{
 80015e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015e4:	af00      	add	r7, sp, #0
    //uint8_t i=0,j,k,l,m=0, temp;
    uint8_t i = 0, no_of_rows = 12;//Each set will have 12 Modules
    uint8_t no_of_cols = 10;
    //uint8_t result[no_of_rows][no_of_cols];
    uint8_t myresult[BytesPerRow]; //each row size of the image
 80015e6:	1dcb      	adds	r3, r1, #7
 80015e8:	f023 0307 	bic.w	r3, r3, #7
 80015ec:	ebad 0d03 	sub.w	sp, sp, r3
 80015f0:	466e      	mov	r6, sp
            result[l][j] = 0;*/


        int column=0, modular=0,bitcount=0, bit,bytecount=0, bitfetch=0, shift=0, fetchindex=0;
        //column
        for(column=0; column < no_of_cols && i < BytesPerRow; column++) {
 80015f2:	f04f 0900 	mov.w	r9, #0
    uint8_t i = 0, no_of_rows = 12;//Each set will have 12 Modules
 80015f6:	46cc      	mov	ip, r9
        for(column=0; column < no_of_cols && i < BytesPerRow; column++) {
 80015f8:	e04c      	b.n	8001694 <vert_distribution+0xb4>
          for(modular = 0; modular < no_of_rows ; modular++) { //nothing but number of rows
                //fetch bit after every 12th bit
                bit=7;
		myresult[i]=0;
                for(bitcount = modular+(column* (no_of_rows*8)); bitcount < (no_of_rows*no_of_cols*8) && bit >= 0; bitcount+=no_of_rows) { //total bits is number of cols * number of rows * 8 (number of bits)
                        bytecount = bitcount/8;
 80015fa:	f103 0b07 	add.w	fp, r3, #7
 80015fe:	e016      	b.n	800162e <vert_distribution+0x4e>
			// else if((bit-bitfetch) == 0){
			//  myresult[i] = myresult[i] | ((pixel_buffer[bytecount] && (1 << bitfetch)));
			//  printf("((pixel_buffer[%d] && (1 << %d))) : %x", bytecount, bitfetch, ((pixel_buffer[bytecount] && (1 << bitfetch)) ));
			// }
			else {
				shift = bitfetch-bit;
 8001600:	1b2d      	subs	r5, r5, r4
			     myresult[i] = myresult[i] | ((pixel_buffer[bytecount] & fetchindex) >> shift);
 8001602:	f916 a00e 	ldrsb.w	sl, [r6, lr]
 8001606:	f810 b00b 	ldrb.w	fp, [r0, fp]
 800160a:	ea02 020b 	and.w	r2, r2, fp
 800160e:	fa42 f505 	asr.w	r5, r2, r5
 8001612:	ea4a 0505 	orr.w	r5, sl, r5
 8001616:	f806 500e 	strb.w	r5, [r6, lr]
			}
            //printf("=> Column: %d, Modular: %d, bit: %d, bitcount: %d, bytecount: %d, bytevalue: %x, bitfetch: %d, myresult[%d]:%x \n", column, modular, bit, bitcount, bytecount, pixel_buffer[bytecount],  bitfetch, i, myresult[i]);

				bit--;
 800161a:	3c01      	subs	r4, #1
                for(bitcount = modular+(column* (no_of_rows*8)); bitcount < (no_of_rows*no_of_cols*8) && bit >= 0; bitcount+=no_of_rows) { //total bits is number of cols * number of rows * 8 (number of bits)
 800161c:	330c      	adds	r3, #12
 800161e:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001622:	da22      	bge.n	800166a <vert_distribution+0x8a>
 8001624:	2c00      	cmp	r4, #0
 8001626:	db20      	blt.n	800166a <vert_distribution+0x8a>
                        bytecount = bitcount/8;
 8001628:	469b      	mov	fp, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	dbe5      	blt.n	80015fa <vert_distribution+0x1a>
 800162e:	ea4f 0beb 	mov.w	fp, fp, asr #3
                        bitfetch = 7-(bitcount%8);
 8001632:	425d      	negs	r5, r3
 8001634:	f003 0207 	and.w	r2, r3, #7
 8001638:	f005 0507 	and.w	r5, r5, #7
 800163c:	bf58      	it	pl
 800163e:	426a      	negpl	r2, r5
 8001640:	f1c2 0507 	rsb	r5, r2, #7
                        fetchindex = (1 << bitfetch);
 8001644:	2201      	movs	r2, #1
 8001646:	40aa      	lsls	r2, r5
            if((bit-bitfetch) > 0) {
 8001648:	eba4 0a05 	sub.w	sl, r4, r5
 800164c:	f1ba 0f00 	cmp.w	sl, #0
 8001650:	ddd6      	ble.n	8001600 <vert_distribution+0x20>
			 myresult[i] = myresult[i] | ((pixel_buffer[bytecount] & fetchindex) << shift);
 8001652:	f916 500e 	ldrsb.w	r5, [r6, lr]
 8001656:	f810 b00b 	ldrb.w	fp, [r0, fp]
 800165a:	ea02 020b 	and.w	r2, r2, fp
 800165e:	fa02 f20a 	lsl.w	r2, r2, sl
 8001662:	432a      	orrs	r2, r5
 8001664:	f806 200e 	strb.w	r2, [r6, lr]
 8001668:	e7d7      	b.n	800161a <vert_distribution+0x3a>
                }
                	i++;
 800166a:	f10c 0c01 	add.w	ip, ip, #1
 800166e:	fa5f fc8c 	uxtb.w	ip, ip
          for(modular = 0; modular < no_of_rows ; modular++) { //nothing but number of rows
 8001672:	f108 0801 	add.w	r8, r8, #1
 8001676:	f1b8 0f0b 	cmp.w	r8, #11
 800167a:	dc09      	bgt.n	8001690 <vert_distribution+0xb0>
		myresult[i]=0;
 800167c:	46e6      	mov	lr, ip
 800167e:	2300      	movs	r3, #0
 8001680:	f806 300c 	strb.w	r3, [r6, ip]
                for(bitcount = modular+(column* (no_of_rows*8)); bitcount < (no_of_rows*no_of_cols*8) && bit >= 0; bitcount+=no_of_rows) { //total bits is number of cols * number of rows * 8 (number of bits)
 8001684:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8001688:	0153      	lsls	r3, r2, #5
 800168a:	4443      	add	r3, r8
                bit=7;
 800168c:	2407      	movs	r4, #7
                for(bitcount = modular+(column* (no_of_rows*8)); bitcount < (no_of_rows*no_of_cols*8) && bit >= 0; bitcount+=no_of_rows) { //total bits is number of cols * number of rows * 8 (number of bits)
 800168e:	e7c6      	b.n	800161e <vert_distribution+0x3e>
        for(column=0; column < no_of_cols && i < BytesPerRow; column++) {
 8001690:	f109 0901 	add.w	r9, r9, #1
 8001694:	f1b9 0f09 	cmp.w	r9, #9
 8001698:	dc0f      	bgt.n	80016ba <vert_distribution+0xda>
 800169a:	4561      	cmp	r1, ip
 800169c:	d902      	bls.n	80016a4 <vert_distribution+0xc4>
 800169e:	f04f 0800 	mov.w	r8, #0
 80016a2:	e7e8      	b.n	8001676 <vert_distribution+0x96>
 80016a4:	2300      	movs	r3, #0
 80016a6:	e003      	b.n	80016b0 <vert_distribution+0xd0>

#endif

    for(i=0;i<BytesPerRow;i++)
    {
        *(pixel_buffer+i) = myresult[i];
 80016a8:	5cf2      	ldrb	r2, [r6, r3]
 80016aa:	54c2      	strb	r2, [r0, r3]
    for(i=0;i<BytesPerRow;i++)
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4299      	cmp	r1, r3
 80016b2:	d8f9      	bhi.n	80016a8 <vert_distribution+0xc8>
    }

}
 80016b4:	46bd      	mov	sp, r7
 80016b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ba:	2300      	movs	r3, #0
 80016bc:	e7f8      	b.n	80016b0 <vert_distribution+0xd0>
	...

080016c0 <Merge_border>:
    //	 }
}
#endif

void Merge_border(void)
{
 80016c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c4:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
	uint8_t borderLine[256] = {0};
	uint8_t bodyLine[256] = {0};
	uint32_t i;

	//Testing
	memset(&cl_line[0], 0, 256);
 80016c8:	f44f 7480 	mov.w	r4, #256	; 0x100
 80016cc:	4622      	mov	r2, r4
 80016ce:	2100      	movs	r1, #0
 80016d0:	a882      	add	r0, sp, #520	; 0x208
 80016d2:	f000 fe6a 	bl	80023aa <memset>
	memset(&borderLine[0], 0, 256);
 80016d6:	4622      	mov	r2, r4
 80016d8:	2100      	movs	r1, #0
 80016da:	a842      	add	r0, sp, #264	; 0x108
 80016dc:	f000 fe65 	bl	80023aa <memset>
	memset(&bodyLine[0], 0, 256);
 80016e0:	4622      	mov	r2, r4
 80016e2:	2100      	movs	r1, #0
 80016e4:	a802      	add	r0, sp, #8
 80016e6:	f000 fe60 	bl	80023aa <memset>

	if(line_count1 >= extra_config.ExtraConfig1.Height)
 80016ea:	4b7b      	ldr	r3, [pc, #492]	; (80018d8 <Merge_border+0x218>)
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <Merge_border+0x21c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d806      	bhi.n	8001704 <Merge_border+0x44>
	{
		line_count1 = 0;
 80016f6:	2200      	movs	r2, #0
 80016f8:	4b78      	ldr	r3, [pc, #480]	; (80018dc <Merge_border+0x21c>)
 80016fa:	601a      	str	r2, [r3, #0]
		itr1++;
 80016fc:	4a78      	ldr	r2, [pc, #480]	; (80018e0 <Merge_border+0x220>)
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	6013      	str	r3, [r2, #0]
	}
	if(line_count2 >= extra_config.ExtraConfig2.Height)
 8001704:	4b74      	ldr	r3, [pc, #464]	; (80018d8 <Merge_border+0x218>)
 8001706:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <Merge_border+0x224>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d806      	bhi.n	8001720 <Merge_border+0x60>
	{
		line_count2 = 0;
 8001712:	2200      	movs	r2, #0
 8001714:	4b73      	ldr	r3, [pc, #460]	; (80018e4 <Merge_border+0x224>)
 8001716:	601a      	str	r2, [r3, #0]
		itr2++;
 8001718:	4a73      	ldr	r2, [pc, #460]	; (80018e8 <Merge_border+0x228>)
 800171a:	6813      	ldr	r3, [r2, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	6013      	str	r3, [r2, #0]
	}

	//action_flag = START;
	if(image_order.ImgOrder[0].BBType == BORDER)
 8001720:	4b72      	ldr	r3, [pc, #456]	; (80018ec <Merge_border+0x22c>)
 8001722:	795b      	ldrb	r3, [r3, #5]
 8001724:	2b28      	cmp	r3, #40	; 0x28
 8001726:	d00f      	beq.n	8001748 <Merge_border+0x88>
	{
		memcpy(&borderLine[0],(uint32_t *)(extra_config.ExtraConfig1.FlStartAdr +(line_count1*extra_config.ExtraConfig1.BytesPerRow)), extra_config.ExtraConfig1.BytesPerRow);
		line_count1++;
	}

	 if(image_order.ImgOrder[1].BBType == BODY)
 8001728:	4b70      	ldr	r3, [pc, #448]	; (80018ec <Merge_border+0x22c>)
 800172a:	7adb      	ldrb	r3, [r3, #11]
 800172c:	2b29      	cmp	r3, #41	; 0x29
 800172e:	d01a      	beq.n	8001766 <Merge_border+0xa6>
		line_count2++;
	}

	 activeRowSize = 120;

	if( (extra_config.ExtraConfig2.BytesPerRow > 0) && (bodyLine[extra_config.ExtraConfig2.BytesPerRow-1] & 0xff) != 0)
 8001730:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <Merge_border+0x218>)
 8001732:	f8d3 3032 	ldr.w	r3, [r3, #50]	; 0x32
 8001736:	2b00      	cmp	r3, #0
 8001738:	d036      	beq.n	80017a8 <Merge_border+0xe8>
 800173a:	3b01      	subs	r3, #1
 800173c:	aa02      	add	r2, sp, #8
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d031      	beq.n	80017a8 <Merge_border+0xe8>
 8001744:	2300      	movs	r3, #0
 8001746:	e027      	b.n	8001798 <Merge_border+0xd8>
		memcpy(&borderLine[0],(uint32_t *)(extra_config.ExtraConfig1.FlStartAdr +(line_count1*extra_config.ExtraConfig1.BytesPerRow)), extra_config.ExtraConfig1.BytesPerRow);
 8001748:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <Merge_border+0x218>)
 800174a:	6a19      	ldr	r1, [r3, #32]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4c63      	ldr	r4, [pc, #396]	; (80018dc <Merge_border+0x21c>)
 8001750:	6820      	ldr	r0, [r4, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	fb03 1100 	mla	r1, r3, r0, r1
 8001758:	a842      	add	r0, sp, #264	; 0x108
 800175a:	f000 fe1b 	bl	8002394 <memcpy>
		line_count1++;
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	6023      	str	r3, [r4, #0]
 8001764:	e7e0      	b.n	8001728 <Merge_border+0x68>
		memcpy(&bodyLine[0],(uint32_t *)(extra_config.ExtraConfig2.FlStartAdr +(line_count2*extra_config.ExtraConfig2.BytesPerRow)), extra_config.ExtraConfig2.BytesPerRow);
 8001766:	4b5c      	ldr	r3, [pc, #368]	; (80018d8 <Merge_border+0x218>)
 8001768:	f8d3 1036 	ldr.w	r1, [r3, #54]	; 0x36
 800176c:	f8d3 3032 	ldr.w	r3, [r3, #50]	; 0x32
 8001770:	4c5c      	ldr	r4, [pc, #368]	; (80018e4 <Merge_border+0x224>)
 8001772:	6820      	ldr	r0, [r4, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	fb03 1100 	mla	r1, r3, r0, r1
 800177a:	a802      	add	r0, sp, #8
 800177c:	f000 fe0a 	bl	8002394 <memcpy>
		line_count2++;
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	6023      	str	r3, [r4, #0]
 8001786:	e7d3      	b.n	8001730 <Merge_border+0x70>
	{
		for (i =0 ; i<activeRowSize; i++)
		{
			cl_line[i] = (bodyLine[i] & borderLine[i]);
 8001788:	aa02      	add	r2, sp, #8
 800178a:	5cd2      	ldrb	r2, [r2, r3]
 800178c:	a942      	add	r1, sp, #264	; 0x108
 800178e:	5cc9      	ldrb	r1, [r1, r3]
 8001790:	400a      	ands	r2, r1
 8001792:	a982      	add	r1, sp, #520	; 0x208
 8001794:	54ca      	strb	r2, [r1, r3]
		for (i =0 ; i<activeRowSize; i++)
 8001796:	3301      	adds	r3, #1
 8001798:	2b77      	cmp	r3, #119	; 0x77
 800179a:	d9f5      	bls.n	8001788 <Merge_border+0xc8>
 800179c:	e006      	b.n	80017ac <Merge_border+0xec>
	}
	else
	{
		for (i = 0 ; i<activeRowSize; i++)
		{
			cl_line[i] = borderLine[i];
 800179e:	aa42      	add	r2, sp, #264	; 0x108
 80017a0:	5cd1      	ldrb	r1, [r2, r3]
 80017a2:	aa82      	add	r2, sp, #520	; 0x208
 80017a4:	54d1      	strb	r1, [r2, r3]
		for (i = 0 ; i<activeRowSize; i++)
 80017a6:	3301      	adds	r3, #1
 80017a8:	2b77      	cmp	r3, #119	; 0x77
 80017aa:	d9f8      	bls.n	800179e <Merge_border+0xde>
		}
	}
	vert_distribution(cl_line, 120); //MJN
 80017ac:	2178      	movs	r1, #120	; 0x78
 80017ae:	a882      	add	r0, sp, #520	; 0x208
 80017b0:	f7ff ff16 	bl	80015e0 <vert_distribution>

	GPIO_ResetBits(GPIOA, OE_PIN);
 80017b4:	2110      	movs	r1, #16
 80017b6:	484e      	ldr	r0, [pc, #312]	; (80018f0 <Merge_border+0x230>)
 80017b8:	f7fe fe77 	bl	80004aa <GPIO_ResetBits>

	/*Enabling demux which controls FRC Port Selection*/
	MUX_LOW;
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c2:	484c      	ldr	r0, [pc, #304]	; (80018f4 <Merge_border+0x234>)
 80017c4:	f7fe fe73 	bl	80004ae <GPIO_WriteBit>
	uint8_t idx_count = 0,cl_count = 0, idx;
 80017c8:	f04f 0a00 	mov.w	sl, #0

	for (addr = 0; addr < config_hw.MaxColumns; addr++)
 80017cc:	46d1      	mov	r9, sl
 80017ce:	e031      	b.n	8001834 <Merge_border+0x174>
					latch_data_byte(cl_line[idx], data_port,data_pin,clk_port,clk_pin);
					//latch_data_byte(reverseBits(cl_line[idx]));
				}
				else
				{
					latch_data_byte(0x00, data_port,data_pin,clk_port,clk_pin);
 80017d0:	9500      	str	r5, [sp, #0]
 80017d2:	4633      	mov	r3, r6
 80017d4:	463a      	mov	r2, r7
 80017d6:	4641      	mov	r1, r8
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff f9e3 	bl	8000ba4 <latch_data_byte>
				}
				cl_count--;
 80017de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80017e2:	fa5f fb8b 	uxtb.w	fp, fp
			for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 80017e6:	3401      	adds	r4, #1
 80017e8:	b2e4      	uxtb	r4, r4
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <Merge_border+0x238>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	429c      	cmp	r4, r3
 80017f0:	d214      	bcs.n	800181c <Merge_border+0x15c>
				if(config_hw.ActiveRows[cl_cards])
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <Merge_border+0x238>)
 80017f4:	4423      	add	r3, r4
 80017f6:	7a5b      	ldrb	r3, [r3, #9]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0e9      	beq.n	80017d0 <Merge_border+0x110>
					idx = (idx_count * act_rows) + cl_count;
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <Merge_border+0x23c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	fb13 f30a 	smulbb	r3, r3, sl
 8001804:	fa5b f383 	uxtab	r3, fp, r3
 8001808:	b2db      	uxtb	r3, r3
					latch_data_byte(cl_line[idx], data_port,data_pin,clk_port,clk_pin);
 800180a:	aa82      	add	r2, sp, #520	; 0x208
 800180c:	5cd0      	ldrb	r0, [r2, r3]
 800180e:	9500      	str	r5, [sp, #0]
 8001810:	4633      	mov	r3, r6
 8001812:	463a      	mov	r2, r7
 8001814:	4641      	mov	r1, r8
 8001816:	f7ff f9c5 	bl	8000ba4 <latch_data_byte>
 800181a:	e7e0      	b.n	80017de <Merge_border+0x11e>
			}
			idx_count++;
 800181c:	f10a 0a01 	add.w	sl, sl, #1
 8001820:	fa5f fa8a 	uxtb.w	sl, sl
			GPIO_ResetBits(GPIOA, OE_PIN);
 8001824:	2110      	movs	r1, #16
 8001826:	4832      	ldr	r0, [pc, #200]	; (80018f0 <Merge_border+0x230>)
 8001828:	f7fe fe3f 	bl	80004aa <GPIO_ResetBits>
	for (addr = 0; addr < config_hw.MaxColumns; addr++)
 800182c:	f109 0901 	add.w	r9, r9, #1
 8001830:	fa4f f989 	sxtb.w	r9, r9
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <Merge_border+0x238>)
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	4599      	cmp	r9, r3
 800183a:	da3b      	bge.n	80018b4 <Merge_border+0x1f4>
		data_port = data_pins[addr][1];
 800183c:	4830      	ldr	r0, [pc, #192]	; (8001900 <Merge_border+0x240>)
 800183e:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8001842:	18c2      	adds	r2, r0, r3
 8001844:	f892 8001 	ldrb.w	r8, [r2, #1]
		clk_port = clock_pins[addr][1];
 8001848:	4d2e      	ldr	r5, [pc, #184]	; (8001904 <Merge_border+0x244>)
 800184a:	18ea      	adds	r2, r5, r3
 800184c:	7856      	ldrb	r6, [r2, #1]
		data_pin = (uint8_t)atoi(&data_pins[addr][2]);
 800184e:	1c9c      	adds	r4, r3, #2
 8001850:	4420      	add	r0, r4
 8001852:	f000 fd77 	bl	8002344 <atoi>
 8001856:	b2c7      	uxtb	r7, r0
		clk_pin = (uint8_t)atoi(&clock_pins[addr][2]);
 8001858:	1928      	adds	r0, r5, r4
 800185a:	f000 fd73 	bl	8002344 <atoi>
 800185e:	b2c5      	uxtb	r5, r0
		if(config_hw.ActiveColumns[config_data.LogicColumns[addr]])
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <Merge_border+0x248>)
 8001862:	444b      	add	r3, r9
 8001864:	7898      	ldrb	r0, [r3, #2]
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <Merge_border+0x238>)
 8001868:	4403      	add	r3, r0
 800186a:	7e5c      	ldrb	r4, [r3, #25]
 800186c:	b14c      	cbz	r4, 8001882 <Merge_border+0x1c2>
			latch_addr_byte(config_data.LogicColumns[addr]);
 800186e:	f7ff f941 	bl	8000af4 <latch_addr_byte>
			GPIO_SetBits(GPIOA, OE_PIN);
 8001872:	2110      	movs	r1, #16
 8001874:	481e      	ldr	r0, [pc, #120]	; (80018f0 <Merge_border+0x230>)
 8001876:	f7fe fe16 	bl	80004a6 <GPIO_SetBits>
			cl_count = 11;
 800187a:	f04f 0b0b 	mov.w	fp, #11
			for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 800187e:	2400      	movs	r4, #0
 8001880:	e7b3      	b.n	80017ea <Merge_border+0x12a>
		}
		else
		{
			latch_addr_byte(config_data.LogicColumns[addr]);
 8001882:	f7ff f937 	bl	8000af4 <latch_addr_byte>
			GPIO_SetBits(GPIOA, OE_PIN);
 8001886:	2110      	movs	r1, #16
 8001888:	4819      	ldr	r0, [pc, #100]	; (80018f0 <Merge_border+0x230>)
 800188a:	f7fe fe0c 	bl	80004a6 <GPIO_SetBits>
			for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 800188e:	e008      	b.n	80018a2 <Merge_border+0x1e2>
			{
				latch_data_byte(0x00, data_port,data_pin,clk_port,clk_pin);
 8001890:	9500      	str	r5, [sp, #0]
 8001892:	4633      	mov	r3, r6
 8001894:	463a      	mov	r2, r7
 8001896:	4641      	mov	r1, r8
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff f983 	bl	8000ba4 <latch_data_byte>
			for (cl_cards = 0; cl_cards < config_hw.MaxRows; cl_cards++)
 800189e:	3401      	adds	r4, #1
 80018a0:	b2e4      	uxtb	r4, r4
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <Merge_border+0x238>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	429c      	cmp	r4, r3
 80018a8:	d3f2      	bcc.n	8001890 <Merge_border+0x1d0>
			}
			GPIO_ResetBits(GPIOA, OE_PIN);
 80018aa:	2110      	movs	r1, #16
 80018ac:	4810      	ldr	r0, [pc, #64]	; (80018f0 <Merge_border+0x230>)
 80018ae:	f7fe fdfc 	bl	80004aa <GPIO_ResetBits>
 80018b2:	e7bb      	b.n	800182c <Merge_border+0x16c>
		}

	}
	g_curr_line++;
 80018b4:	4a15      	ldr	r2, [pc, #84]	; (800190c <Merge_border+0x24c>)
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	6013      	str	r3, [r2, #0]
	MUX_HIGH;
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <Merge_border+0x234>)
 80018c4:	f7fe fdf3 	bl	80004ae <GPIO_WriteBit>
	action_flag = IDLE;
 80018c8:	220b      	movs	r2, #11
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <Merge_border+0x250>)
 80018cc:	701a      	strb	r2, [r3, #0]
}
 80018ce:	f50d 7d43 	add.w	sp, sp, #780	; 0x30c
 80018d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d6:	bf00      	nop
 80018d8:	20000354 	.word	0x20000354
 80018dc:	20001140 	.word	0x20001140
 80018e0:	20001118 	.word	0x20001118
 80018e4:	20001114 	.word	0x20001114
 80018e8:	20001110 	.word	0x20001110
 80018ec:	20000f9c 	.word	0x20000f9c
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	20000320 	.word	0x20000320
 80018fc:	200002e8 	.word	0x200002e8
 8001900:	200000a0 	.word	0x200000a0
 8001904:	20000050 	.word	0x20000050
 8001908:	2000114c 	.word	0x2000114c
 800190c:	20001160 	.word	0x20001160
 8001910:	200010e2 	.word	0x200010e2

08001914 <action_feed_data>:
{
 8001914:	b508      	push	{r3, lr}
	if(LatchingDataFlag == 0x01)
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <action_feed_data+0x24>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d005      	beq.n	800192c <action_feed_data+0x18>
    else if(LatchingDataFlag == 0x10)
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <action_feed_data+0x24>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b10      	cmp	r3, #16
 8001928:	d003      	beq.n	8001932 <action_feed_data+0x1e>
 800192a:	bd08      	pop	{r3, pc}
		pattern_test();
 800192c:	f7ff fd3a 	bl	80013a4 <pattern_test>
 8001930:	bd08      	pop	{r3, pc}
    	Merge_border();
 8001932:	f7ff fec5 	bl	80016c0 <Merge_border>
}
 8001936:	e7f8      	b.n	800192a <action_feed_data+0x16>
 8001938:	200002e0 	.word	0x200002e0

0800193c <action_start>:
{
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(cmd_count >= (sizeof(ejac_cmd_start_t)+SIZE_CMD))
 800193e:	4b87      	ldr	r3, [pc, #540]	; (8001b5c <action_start+0x220>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b17      	cmp	r3, #23
 8001944:	f240 8109 	bls.w	8001b5a <action_start+0x21e>
		memcpy(&start_cmd, (save_buffer + SIZE_CMD), sizeof(ejac_cmd_start_t));
 8001948:	4b85      	ldr	r3, [pc, #532]	; (8001b60 <action_start+0x224>)
 800194a:	4a86      	ldr	r2, [pc, #536]	; (8001b64 <action_start+0x228>)
 800194c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8001950:	6855      	ldr	r5, [r2, #4]
 8001952:	6894      	ldr	r4, [r2, #8]
 8001954:	68d0      	ldr	r0, [r2, #12]
 8001956:	6019      	str	r1, [r3, #0]
 8001958:	605d      	str	r5, [r3, #4]
 800195a:	609c      	str	r4, [r3, #8]
 800195c:	60d8      	str	r0, [r3, #12]
 800195e:	6911      	ldr	r1, [r2, #16]
 8001960:	6119      	str	r1, [r3, #16]
		line_count1 = start_cmd.Line1;
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	4a80      	ldr	r2, [pc, #512]	; (8001b68 <action_start+0x22c>)
 8001966:	6011      	str	r1, [r2, #0]
		itr1 = start_cmd.Itr1;
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	4a80      	ldr	r2, [pc, #512]	; (8001b6c <action_start+0x230>)
 800196c:	6011      	str	r1, [r2, #0]
		line_count2 = start_cmd.Line2;
 800196e:	6899      	ldr	r1, [r3, #8]
 8001970:	4a7f      	ldr	r2, [pc, #508]	; (8001b70 <action_start+0x234>)
 8001972:	6011      	str	r1, [r2, #0]
		itr2 = start_cmd.Itr2;
 8001974:	68d9      	ldr	r1, [r3, #12]
 8001976:	4a7f      	ldr	r2, [pc, #508]	; (8001b74 <action_start+0x238>)
 8001978:	6011      	str	r1, [r2, #0]
		g_curr_line = start_cmd.GlobalCurr;
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	4b7e      	ldr	r3, [pc, #504]	; (8001b78 <action_start+0x23c>)
 800197e:	601a      	str	r2, [r3, #0]
		if((flash_start_addr[0] == 0) || (hrdwrSettingsDone == 0))
 8001980:	4b7e      	ldr	r3, [pc, #504]	; (8001b7c <action_start+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b123      	cbz	r3, 8001990 <action_start+0x54>
 8001986:	4b7e      	ldr	r3, [pc, #504]	; (8001b80 <action_start+0x244>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 8086 	bne.w	8001a9c <action_start+0x160>
			memcpy(&config_data, (uint32_t *)0x08010000, (SIZE_CMD_IMG_CONFIG-SIZE_CMD));
 8001990:	4d7c      	ldr	r5, [pc, #496]	; (8001b84 <action_start+0x248>)
 8001992:	4f7d      	ldr	r7, [pc, #500]	; (8001b88 <action_start+0x24c>)
 8001994:	463c      	mov	r4, r7
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	6028      	str	r0, [r5, #0]
 800199a:	6069      	str	r1, [r5, #4]
 800199c:	60aa      	str	r2, [r5, #8]
 800199e:	60eb      	str	r3, [r5, #12]
 80019a0:	8823      	ldrh	r3, [r4, #0]
 80019a2:	822b      	strh	r3, [r5, #16]
			memcpy(&extra_config, (uint32_t *)0x08010000, sizeof(ejac_image_extra_config_t));
 80019a4:	463c      	mov	r4, r7
 80019a6:	4d79      	ldr	r5, [pc, #484]	; (8001b8c <action_start+0x250>)
 80019a8:	3730      	adds	r7, #48	; 0x30
 80019aa:	4626      	mov	r6, r4
 80019ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019ae:	6028      	str	r0, [r5, #0]
 80019b0:	6069      	str	r1, [r5, #4]
 80019b2:	60aa      	str	r2, [r5, #8]
 80019b4:	60eb      	str	r3, [r5, #12]
 80019b6:	4634      	mov	r4, r6
 80019b8:	3510      	adds	r5, #16
 80019ba:	42be      	cmp	r6, r7
 80019bc:	d1f5      	bne.n	80019aa <action_start+0x6e>
 80019be:	4633      	mov	r3, r6
 80019c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019c2:	6028      	str	r0, [r5, #0]
 80019c4:	6069      	str	r1, [r5, #4]
 80019c6:	60aa      	str	r2, [r5, #8]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	81ab      	strh	r3, [r5, #12]
			memcpy(&config_hw, (uint32_t *)0x0800C000, (SIZE_CMD_HW_CONFIG-SIZE_CMD));
 80019cc:	4c70      	ldr	r4, [pc, #448]	; (8001b90 <action_start+0x254>)
 80019ce:	4d71      	ldr	r5, [pc, #452]	; (8001b94 <action_start+0x258>)
 80019d0:	f104 0720 	add.w	r7, r4, #32
 80019d4:	4626      	mov	r6, r4
 80019d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019d8:	6028      	str	r0, [r5, #0]
 80019da:	6069      	str	r1, [r5, #4]
 80019dc:	60aa      	str	r2, [r5, #8]
 80019de:	60eb      	str	r3, [r5, #12]
 80019e0:	4634      	mov	r4, r6
 80019e2:	3510      	adds	r5, #16
 80019e4:	42be      	cmp	r6, r7
 80019e6:	d1f5      	bne.n	80019d4 <action_start+0x98>
 80019e8:	cc03      	ldmia	r4!, {r0, r1}
 80019ea:	6028      	str	r0, [r5, #0]
 80019ec:	6069      	str	r1, [r5, #4]
 80019ee:	7823      	ldrb	r3, [r4, #0]
 80019f0:	722b      	strb	r3, [r5, #8]
			memcpy(&image_order, (uint32_t *)0x080E0000, sizeof(ejac_cmd_image_order_t));
 80019f2:	4c69      	ldr	r4, [pc, #420]	; (8001b98 <action_start+0x25c>)
 80019f4:	4d69      	ldr	r5, [pc, #420]	; (8001b9c <action_start+0x260>)
 80019f6:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80019fa:	4626      	mov	r6, r4
 80019fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019fe:	6028      	str	r0, [r5, #0]
 8001a00:	6069      	str	r1, [r5, #4]
 8001a02:	60aa      	str	r2, [r5, #8]
 8001a04:	60eb      	str	r3, [r5, #12]
 8001a06:	4634      	mov	r4, r6
 8001a08:	3510      	adds	r5, #16
 8001a0a:	42be      	cmp	r6, r7
 8001a0c:	d1f5      	bne.n	80019fa <action_start+0xbe>
 8001a0e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001a10:	6028      	str	r0, [r5, #0]
 8001a12:	6069      	str	r1, [r5, #4]
 8001a14:	60aa      	str	r2, [r5, #8]
			if(config_hw.Sensor1.Sensor_Status == EJAC_ENABLE)
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <action_start+0x258>)
 8001a18:	791b      	ldrb	r3, [r3, #4]
 8001a1a:	b92b      	cbnz	r3, 8001a28 <action_start+0xec>
				if(config_hw.Sensor1.Sensor_Type == NPN)
 8001a1c:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <action_start+0x258>)
 8001a1e:	789b      	ldrb	r3, [r3, #2]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10c      	bne.n	8001a3e <action_start+0x102>
					sensor1_npn_init();
 8001a24:	f7fe ff73 	bl	800090e <sensor1_npn_init>
			if(config_hw.Sensor2.Sensor_Status == EJAC_ENABLE)
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <action_start+0x258>)
 8001a2a:	79db      	ldrb	r3, [r3, #7]
 8001a2c:	b92b      	cbnz	r3, 8001a3a <action_start+0xfe>
				if(config_hw.Sensor2.Sensor_Type == NPN)
 8001a2e:	4b59      	ldr	r3, [pc, #356]	; (8001b94 <action_start+0x258>)
 8001a30:	795b      	ldrb	r3, [r3, #5]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <action_start+0x10c>
					sensor2_npn_init();
 8001a36:	f7fe ffa1 	bl	800097c <sensor2_npn_init>
{
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e00b      	b.n	8001a56 <action_start+0x11a>
				else if(config_hw.Sensor1.Sensor_Type == PNP)
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f2      	bne.n	8001a28 <action_start+0xec>
					sensor1_pnp_init();
 8001a42:	f7fe ff49 	bl	80008d8 <sensor1_pnp_init>
 8001a46:	e7ef      	b.n	8001a28 <action_start+0xec>
				else if(config_hw.Sensor2.Sensor_Type == PNP)
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f6      	bne.n	8001a3a <action_start+0xfe>
					sensor2_pnp_init();
 8001a4c:	f7fe ff7a 	bl	8000944 <sensor2_pnp_init>
 8001a50:	e7f3      	b.n	8001a3a <action_start+0xfe>
			for(act_count = 0; act_count < config_hw.MaxRows; act_count++)
 8001a52:	3301      	adds	r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <action_start+0x258>)
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d209      	bcs.n	8001a72 <action_start+0x136>
				if(config_hw.ActiveRows[act_count])
 8001a5e:	4a4d      	ldr	r2, [pc, #308]	; (8001b94 <action_start+0x258>)
 8001a60:	441a      	add	r2, r3
 8001a62:	7a52      	ldrb	r2, [r2, #9]
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d0f4      	beq.n	8001a52 <action_start+0x116>
					act_rows++;
 8001a68:	494d      	ldr	r1, [pc, #308]	; (8001ba0 <action_start+0x264>)
 8001a6a:	780a      	ldrb	r2, [r1, #0]
 8001a6c:	3201      	adds	r2, #1
 8001a6e:	700a      	strb	r2, [r1, #0]
 8001a70:	e7ef      	b.n	8001a52 <action_start+0x116>
 8001a72:	2300      	movs	r3, #0
 8001a74:	e001      	b.n	8001a7a <action_start+0x13e>
			for(act_count = 0; act_count < config_hw.MaxColumns; act_count++)
 8001a76:	3301      	adds	r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4a46      	ldr	r2, [pc, #280]	; (8001b94 <action_start+0x258>)
 8001a7c:	7852      	ldrb	r2, [r2, #1]
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d209      	bcs.n	8001a96 <action_start+0x15a>
				if(config_hw.ActiveColumns[act_count])
 8001a82:	4a44      	ldr	r2, [pc, #272]	; (8001b94 <action_start+0x258>)
 8001a84:	441a      	add	r2, r3
 8001a86:	7e52      	ldrb	r2, [r2, #25]
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d0f4      	beq.n	8001a76 <action_start+0x13a>
					act_cols++;
 8001a8c:	4945      	ldr	r1, [pc, #276]	; (8001ba4 <action_start+0x268>)
 8001a8e:	780a      	ldrb	r2, [r1, #0]
 8001a90:	3201      	adds	r2, #1
 8001a92:	700a      	strb	r2, [r1, #0]
 8001a94:	e7ef      	b.n	8001a76 <action_start+0x13a>
			hrdwrSettingsDone = 1;
 8001a96:	2201      	movs	r2, #1
 8001a98:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <action_start+0x244>)
 8001a9a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <action_start+0x26c>)
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	601a      	str	r2, [r3, #0]
		if(config_data.ImageCount == 1)
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <action_start+0x248>)
 8001aa8:	785b      	ldrb	r3, [r3, #1]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d008      	beq.n	8001ac0 <action_start+0x184>
		else if(config_data.ImageCount == 2)
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d00f      	beq.n	8001ad2 <action_start+0x196>
		else if(config_data.ImageCount == 3)
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d014      	beq.n	8001ae0 <action_start+0x1a4>
		response(SUCCES);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 fad4 	bl	8002064 <response>
		for(i =0; i<100;i++)
 8001abc:	2100      	movs	r1, #0
 8001abe:	e01a      	b.n	8001af6 <action_start+0x1ba>
			line_count2 = -1; line_count3 = -1; line_count4 = -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac4:	4a2a      	ldr	r2, [pc, #168]	; (8001b70 <action_start+0x234>)
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4a38      	ldr	r2, [pc, #224]	; (8001bac <action_start+0x270>)
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4a38      	ldr	r2, [pc, #224]	; (8001bb0 <action_start+0x274>)
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e7f1      	b.n	8001ab6 <action_start+0x17a>
			line_count3 = -1; line_count4 = -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	4a35      	ldr	r2, [pc, #212]	; (8001bac <action_start+0x270>)
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4a35      	ldr	r2, [pc, #212]	; (8001bb0 <action_start+0x274>)
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e7ea      	b.n	8001ab6 <action_start+0x17a>
			line_count4 = -1;
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <action_start+0x274>)
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e7e5      	b.n	8001ab6 <action_start+0x17a>
			for(j =0; j<10000;j++);
 8001aea:	3301      	adds	r3, #1
 8001aec:	f242 720f 	movw	r2, #9999	; 0x270f
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d9fa      	bls.n	8001aea <action_start+0x1ae>
		for(i =0; i<100;i++)
 8001af4:	3101      	adds	r1, #1
 8001af6:	2963      	cmp	r1, #99	; 0x63
 8001af8:	d801      	bhi.n	8001afe <action_start+0x1c2>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e7f6      	b.n	8001aec <action_start+0x1b0>
		if((0 == border_count) || (0 == body_count))
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <action_start+0x278>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b113      	cbz	r3, 8001b0a <action_start+0x1ce>
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <action_start+0x27c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b9e3      	cbnz	r3, 8001b44 <action_start+0x208>
			body_count = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <action_start+0x27c>)
 8001b0e:	7013      	strb	r3, [r2, #0]
			border_count = 0;
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <action_start+0x278>)
 8001b12:	7013      	strb	r3, [r2, #0]
			for(act_count = 0; act_count < 	10; act_count++)
 8001b14:	e005      	b.n	8001b22 <action_start+0x1e6>
					border_count++;
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <action_start+0x278>)
 8001b18:	780a      	ldrb	r2, [r1, #0]
 8001b1a:	3201      	adds	r2, #1
 8001b1c:	700a      	strb	r2, [r1, #0]
			for(act_count = 0; act_count < 	10; act_count++)
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b09      	cmp	r3, #9
 8001b24:	d80e      	bhi.n	8001b44 <action_start+0x208>
				if(image_order.ImgOrder[act_count].BBType == BORDER)
 8001b26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001b2a:	0051      	lsls	r1, r2, #1
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <action_start+0x260>)
 8001b2e:	440a      	add	r2, r1
 8001b30:	7952      	ldrb	r2, [r2, #5]
 8001b32:	2a28      	cmp	r2, #40	; 0x28
 8001b34:	d0ef      	beq.n	8001b16 <action_start+0x1da>
				else if(image_order.ImgOrder[act_count].BBType == BODY)
 8001b36:	2a29      	cmp	r2, #41	; 0x29
 8001b38:	d1f1      	bne.n	8001b1e <action_start+0x1e2>
					body_count++;
 8001b3a:	491f      	ldr	r1, [pc, #124]	; (8001bb8 <action_start+0x27c>)
 8001b3c:	780a      	ldrb	r2, [r1, #0]
 8001b3e:	3201      	adds	r2, #1
 8001b40:	700a      	strb	r2, [r1, #0]
 8001b42:	e7ec      	b.n	8001b1e <action_start+0x1e2>
		LatchingDataFlag = 0x10;
 8001b44:	2210      	movs	r2, #16
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <action_start+0x280>)
 8001b48:	701a      	strb	r2, [r3, #0]
		action_feed_data();
 8001b4a:	f7ff fee3 	bl	8001914 <action_feed_data>
		cmd_count = 0;
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4b02      	ldr	r3, [pc, #8]	; (8001b5c <action_start+0x220>)
 8001b52:	601a      	str	r2, [r3, #0]
		action_flag = IDLE;
 8001b54:	220b      	movs	r2, #11
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <action_start+0x284>)
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b5c:	2000111c 	.word	0x2000111c
 8001b60:	20001128 	.word	0x20001128
 8001b64:	20000398 	.word	0x20000398
 8001b68:	20001140 	.word	0x20001140
 8001b6c:	20001118 	.word	0x20001118
 8001b70:	20001114 	.word	0x20001114
 8001b74:	20001110 	.word	0x20001110
 8001b78:	20001160 	.word	0x20001160
 8001b7c:	200002f4 	.word	0x200002f4
 8001b80:	200002e1 	.word	0x200002e1
 8001b84:	2000114c 	.word	0x2000114c
 8001b88:	08010000 	.word	0x08010000
 8001b8c:	20000354 	.word	0x20000354
 8001b90:	0800c000 	.word	0x0800c000
 8001b94:	20000320 	.word	0x20000320
 8001b98:	080e0000 	.word	0x080e0000
 8001b9c:	20000f9c 	.word	0x20000f9c
 8001ba0:	200002e8 	.word	0x200002e8
 8001ba4:	200010e1 	.word	0x200010e1
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	200010dc 	.word	0x200010dc
 8001bb0:	2000034c 	.word	0x2000034c
 8001bb4:	20001164 	.word	0x20001164
 8001bb8:	2000113c 	.word	0x2000113c
 8001bbc:	200002e0 	.word	0x200002e0
 8001bc0:	200010e2 	.word	0x200010e2

08001bc4 <fill_column>:

void fill_column(uint8_t *arr)
{
	int16_t iter = 0;

	for(iter = 0; iter < 16; iter++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e002      	b.n	8001bce <fill_column+0xa>
	{
		arr[iter] = iter;
 8001bc8:	54c3      	strb	r3, [r0, r3]
	for(iter = 0; iter < 16; iter++)
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	2b0f      	cmp	r3, #15
 8001bd0:	ddfa      	ble.n	8001bc8 <fill_column+0x4>
	}
}
 8001bd2:	4770      	bx	lr

08001bd4 <action_test_pattern>:
void action_test_pattern(void)
{
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t act_count;

	if(cmd_count >= (sizeof(ejac_cmd_test_pattern_t)+SIZE_CMD))
 8001bd6:	4b5a      	ldr	r3, [pc, #360]	; (8001d40 <action_test_pattern+0x16c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001bde:	d200      	bcs.n	8001be2 <action_test_pattern+0xe>
 8001be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		fill_column(config_data.LogicColumns);
 8001be2:	4858      	ldr	r0, [pc, #352]	; (8001d44 <action_test_pattern+0x170>)
 8001be4:	f7ff ffee 	bl	8001bc4 <fill_column>
		memcpy(&test_pattern, (save_buffer + SIZE_CMD), sizeof(ejac_cmd_test_pattern_t));
 8001be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bec:	4956      	ldr	r1, [pc, #344]	; (8001d48 <action_test_pattern+0x174>)
 8001bee:	4857      	ldr	r0, [pc, #348]	; (8001d4c <action_test_pattern+0x178>)
 8001bf0:	f000 fbd0 	bl	8002394 <memcpy>
		line_count1 = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <action_test_pattern+0x17c>)
 8001bf8:	6013      	str	r3, [r2, #0]
		itr1 = 0;
 8001bfa:	4a56      	ldr	r2, [pc, #344]	; (8001d54 <action_test_pattern+0x180>)
 8001bfc:	6013      	str	r3, [r2, #0]
		line_count2 = -1;
 8001bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8001c02:	4a55      	ldr	r2, [pc, #340]	; (8001d58 <action_test_pattern+0x184>)
 8001c04:	6011      	str	r1, [r2, #0]
		itr2 = 0;
 8001c06:	4a55      	ldr	r2, [pc, #340]	; (8001d5c <action_test_pattern+0x188>)
 8001c08:	6013      	str	r3, [r2, #0]
		/*line_count3 = -1;
		itr3 = 0;
		line_count4 = -1;
		itr4 = 0;*/
		g_curr_line = 0;
 8001c0a:	4a55      	ldr	r2, [pc, #340]	; (8001d60 <action_test_pattern+0x18c>)
 8001c0c:	6013      	str	r3, [r2, #0]


		//if(flash_start_addr[0] == 0)
		if(hrdwrSettingsDone == 0)
 8001c0e:	4b55      	ldr	r3, [pc, #340]	; (8001d64 <action_test_pattern+0x190>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d162      	bne.n	8001cdc <action_test_pattern+0x108>
		{
			memcpy(&config_hw, (uint32_t *)0x0800C000, (SIZE_CMD_HW_CONFIG-SIZE_CMD));
 8001c16:	4c54      	ldr	r4, [pc, #336]	; (8001d68 <action_test_pattern+0x194>)
 8001c18:	4d54      	ldr	r5, [pc, #336]	; (8001d6c <action_test_pattern+0x198>)
 8001c1a:	f104 0720 	add.w	r7, r4, #32
 8001c1e:	4626      	mov	r6, r4
 8001c20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c22:	6028      	str	r0, [r5, #0]
 8001c24:	6069      	str	r1, [r5, #4]
 8001c26:	60aa      	str	r2, [r5, #8]
 8001c28:	60eb      	str	r3, [r5, #12]
 8001c2a:	4634      	mov	r4, r6
 8001c2c:	3510      	adds	r5, #16
 8001c2e:	42be      	cmp	r6, r7
 8001c30:	d1f5      	bne.n	8001c1e <action_test_pattern+0x4a>
 8001c32:	cc03      	ldmia	r4!, {r0, r1}
 8001c34:	6028      	str	r0, [r5, #0]
 8001c36:	6069      	str	r1, [r5, #4]
 8001c38:	7823      	ldrb	r3, [r4, #0]
 8001c3a:	722b      	strb	r3, [r5, #8]

			if(config_hw.Sensor1.Sensor_Status == EJAC_ENABLE)
 8001c3c:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <action_test_pattern+0x198>)
 8001c3e:	791b      	ldrb	r3, [r3, #4]
 8001c40:	b9ab      	cbnz	r3, 8001c6e <action_test_pattern+0x9a>
			{
				if(config_hw.Sensor1.Sensor_Type == NPN)
 8001c42:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <action_test_pattern+0x198>)
 8001c44:	789b      	ldrb	r3, [r3, #2]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10c      	bne.n	8001c64 <action_test_pattern+0x90>
				{
					sensor1_npn_init();
 8001c4a:	f7fe fe60 	bl	800090e <sensor1_npn_init>
				//TODO:
				EXTI_ClearITPendingBit(EXTI_Line0);
				NVIC_DisableIRQ(EXTI0_IRQn);
			}

			if(config_hw.Sensor2.Sensor_Status == EJAC_ENABLE)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <action_test_pattern+0x198>)
 8001c50:	79db      	ldrb	r3, [r3, #7]
 8001c52:	b9cb      	cbnz	r3, 8001c88 <action_test_pattern+0xb4>
			{
				if(config_hw.Sensor2.Sensor_Type == NPN)
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <action_test_pattern+0x198>)
 8001c56:	795b      	ldrb	r3, [r3, #5]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d110      	bne.n	8001c7e <action_test_pattern+0xaa>
				{
					sensor2_npn_init();
 8001c5c:	f7fe fe8e 	bl	800097c <sensor2_npn_init>
{
 8001c60:	2300      	movs	r3, #0
 8001c62:	e01b      	b.n	8001c9c <action_test_pattern+0xc8>
				else if(config_hw.Sensor1.Sensor_Type == PNP)
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f2      	bne.n	8001c4e <action_test_pattern+0x7a>
					sensor1_pnp_init();
 8001c68:	f7fe fe36 	bl	80008d8 <sensor1_pnp_init>
 8001c6c:	e7ef      	b.n	8001c4e <action_test_pattern+0x7a>
				EXTI_ClearITPendingBit(EXTI_Line0);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7fe fb1a 	bl	80002a8 <EXTI_ClearITPendingBit>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <action_test_pattern+0x19c>)
 8001c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c7c:	e7e7      	b.n	8001c4e <action_test_pattern+0x7a>
				}
				else if(config_hw.Sensor2.Sensor_Type == PNP)
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ee      	bne.n	8001c60 <action_test_pattern+0x8c>
				{
					sensor2_pnp_init();
 8001c82:	f7fe fe5f 	bl	8000944 <sensor2_pnp_init>
 8001c86:	e7eb      	b.n	8001c60 <action_test_pattern+0x8c>
			}
			else
			{
				//sensor2_npn_init();
				//TODO:
				EXTI_ClearITPendingBit(EXTI_Line1);
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7fe fb0d 	bl	80002a8 <EXTI_ClearITPendingBit>
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <action_test_pattern+0x19c>)
 8001c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c96:	e7e3      	b.n	8001c60 <action_test_pattern+0x8c>
				{
					sensor3_pnp_init();
				}
			}*/

			for(act_count = 0; act_count < config_hw.MaxRows; act_count++)
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4a33      	ldr	r2, [pc, #204]	; (8001d6c <action_test_pattern+0x198>)
 8001c9e:	7812      	ldrb	r2, [r2, #0]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d209      	bcs.n	8001cb8 <action_test_pattern+0xe4>
			{
				if(config_hw.ActiveRows[act_count])
 8001ca4:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <action_test_pattern+0x198>)
 8001ca6:	441a      	add	r2, r3
 8001ca8:	7a52      	ldrb	r2, [r2, #9]
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d0f4      	beq.n	8001c98 <action_test_pattern+0xc4>
				{
					act_rows++;
 8001cae:	4931      	ldr	r1, [pc, #196]	; (8001d74 <action_test_pattern+0x1a0>)
 8001cb0:	780a      	ldrb	r2, [r1, #0]
 8001cb2:	3201      	adds	r2, #1
 8001cb4:	700a      	strb	r2, [r1, #0]
 8001cb6:	e7ef      	b.n	8001c98 <action_test_pattern+0xc4>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e001      	b.n	8001cc0 <action_test_pattern+0xec>
				}
			}
			for(act_count = 0; act_count < config_hw.MaxColumns; act_count++)
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <action_test_pattern+0x198>)
 8001cc2:	7852      	ldrb	r2, [r2, #1]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d209      	bcs.n	8001cdc <action_test_pattern+0x108>
			{
				if(config_hw.ActiveColumns[act_count])
 8001cc8:	4a28      	ldr	r2, [pc, #160]	; (8001d6c <action_test_pattern+0x198>)
 8001cca:	441a      	add	r2, r3
 8001ccc:	7e52      	ldrb	r2, [r2, #25]
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d0f4      	beq.n	8001cbc <action_test_pattern+0xe8>
				{
					act_cols++;
 8001cd2:	4929      	ldr	r1, [pc, #164]	; (8001d78 <action_test_pattern+0x1a4>)
 8001cd4:	780a      	ldrb	r2, [r1, #0]
 8001cd6:	3201      	adds	r2, #1
 8001cd8:	700a      	strb	r2, [r1, #0]
 8001cda:	e7ef      	b.n	8001cbc <action_test_pattern+0xe8>
				}
			}
		}

		//feed_next_data = 1;
		action_flag = IDLE;
 8001cdc:	220b      	movs	r2, #11
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <action_test_pattern+0x1a8>)
 8001ce0:	701a      	strb	r2, [r3, #0]
		LatchingDataFlag = 0x01;
 8001ce2:	2401      	movs	r4, #1
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <action_test_pattern+0x1ac>)
 8001ce6:	701c      	strb	r4, [r3, #0]
		action_feed_data();
 8001ce8:	f7ff fe14 	bl	8001914 <action_feed_data>
		response(SUCCES);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f000 f9b9 	bl	8002064 <response>
		uint32_t i,j;
		hrdwrSettingsDone = 1;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <action_test_pattern+0x190>)
 8001cf4:	701c      	strb	r4, [r3, #0]

		for(i =0; i<100;i++)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	e005      	b.n	8001d06 <action_test_pattern+0x132>
		{
			for(j =0; j<10000;j++);
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d9fa      	bls.n	8001cfa <action_test_pattern+0x126>
		for(i =0; i<100;i++)
 8001d04:	3101      	adds	r1, #1
 8001d06:	2963      	cmp	r1, #99	; 0x63
 8001d08:	d801      	bhi.n	8001d0e <action_test_pattern+0x13a>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e7f6      	b.n	8001cfc <action_test_pattern+0x128>

		}

		if(config_hw.Sensor1.Sensor_Status == EJAC_ENABLE)
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <action_test_pattern+0x198>)
 8001d10:	791b      	ldrb	r3, [r3, #4]
 8001d12:	b133      	cbz	r3, 8001d22 <action_test_pattern+0x14e>
		{
			EXTI_ClearITPendingBit(EXTI_Line0);
			NVIC_EnableIRQ(EXTI0_IRQn);
		}
		if(config_hw.Sensor2.Sensor_Status == EJAC_ENABLE)
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <action_test_pattern+0x198>)
 8001d16:	79db      	ldrb	r3, [r3, #7]
 8001d18:	b153      	cbz	r3, 8001d30 <action_test_pattern+0x15c>
		{
			EXTI_ClearITPendingBit(EXTI_Line1);
			NVIC_EnableIRQ(EXTI1_IRQn);
		}
		cmd_count = 0;
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <action_test_pattern+0x16c>)
 8001d1e:	601a      	str	r2, [r3, #0]
	}
}
 8001d20:	e75e      	b.n	8001be0 <action_test_pattern+0xc>
			EXTI_ClearITPendingBit(EXTI_Line0);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7fe fac0 	bl	80002a8 <EXTI_ClearITPendingBit>
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001d28:	2240      	movs	r2, #64	; 0x40
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <action_test_pattern+0x19c>)
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e7f1      	b.n	8001d14 <action_test_pattern+0x140>
			EXTI_ClearITPendingBit(EXTI_Line1);
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7fe fab9 	bl	80002a8 <EXTI_ClearITPendingBit>
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <action_test_pattern+0x19c>)
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e7ed      	b.n	8001d1a <action_test_pattern+0x146>
 8001d3e:	bf00      	nop
 8001d40:	2000111c 	.word	0x2000111c
 8001d44:	2000114e 	.word	0x2000114e
 8001d48:	2000039c 	.word	0x2000039c
 8001d4c:	20000fd8 	.word	0x20000fd8
 8001d50:	20001140 	.word	0x20001140
 8001d54:	20001118 	.word	0x20001118
 8001d58:	20001114 	.word	0x20001114
 8001d5c:	20001110 	.word	0x20001110
 8001d60:	20001160 	.word	0x20001160
 8001d64:	200002e1 	.word	0x200002e1
 8001d68:	0800c000 	.word	0x0800c000
 8001d6c:	20000320 	.word	0x20000320
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	200002e8 	.word	0x200002e8
 8001d78:	200010e1 	.word	0x200010e1
 8001d7c:	200010e2 	.word	0x200010e2
 8001d80:	200002e0 	.word	0x200002e0

08001d84 <main>:
{
 8001d84:	b508      	push	{r3, lr}
	uart_init();
 8001d86:	f000 f8c7 	bl	8001f18 <uart_init>
	extender_init();
 8001d8a:	f7fe fd2b 	bl	80007e4 <extender_init>
    action_flag = IDLE;
 8001d8e:	220b      	movs	r2, #11
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <main+0xc0>)
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e00c      	b.n	8001db0 <main+0x2c>
			case STATUS: action_status();
 8001d96:	f7fe ff8d 	bl	8000cb4 <action_status>
		if((feed_next_data) && (Mode == RUNNING))
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <main+0xc4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b11b      	cbz	r3, 8001da8 <main+0x24>
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <main+0xc8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d045      	beq.n	8001e34 <main+0xb0>
		if(receive_input_data)
 8001da8:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <main+0xcc>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d145      	bne.n	8001e3c <main+0xb8>
		switch(action_flag)
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <main+0xc0>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b0d      	cmp	r3, #13
 8001db8:	d8ef      	bhi.n	8001d9a <main+0x16>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <main+0x3c>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001d97 	.word	0x08001d97
 8001dc4:	08001df9 	.word	0x08001df9
 8001dc8:	08001dff 	.word	0x08001dff
 8001dcc:	08001e05 	.word	0x08001e05
 8001dd0:	08001d9b 	.word	0x08001d9b
 8001dd4:	08001e0b 	.word	0x08001e0b
 8001dd8:	08001e11 	.word	0x08001e11
 8001ddc:	08001e17 	.word	0x08001e17
 8001de0:	08001e1d 	.word	0x08001e1d
 8001de4:	08001e23 	.word	0x08001e23
 8001de8:	08001d9b 	.word	0x08001d9b
 8001dec:	08001e29 	.word	0x08001e29
 8001df0:	08001d9b 	.word	0x08001d9b
 8001df4:	08001e2f 	.word	0x08001e2f
			case LOAD: action_load_handle();
 8001df8:	f7fe ff84 	bl	8000d04 <action_load_handle>
				break;
 8001dfc:	e7cd      	b.n	8001d9a <main+0x16>
			case START: action_start();
 8001dfe:	f7ff fd9d 	bl	800193c <action_start>
				break;
 8001e02:	e7ca      	b.n	8001d9a <main+0x16>
			case STOP: action_stop();
 8001e04:	f7ff f92a 	bl	800105c <action_stop>
				break;
 8001e08:	e7c7      	b.n	8001d9a <main+0x16>
			case IMAGE_CONFIG: action_image_config();
 8001e0a:	f7ff f94d 	bl	80010a8 <action_image_config>
				break;
 8001e0e:	e7c4      	b.n	8001d9a <main+0x16>
			case HARDWARE_CONFIG: action_hardware_config();
 8001e10:	f7ff f9b4 	bl	800117c <action_hardware_config>
				break;
 8001e14:	e7c1      	b.n	8001d9a <main+0x16>
			case IMAGE_INFO: action_image_info();
 8001e16:	f7ff fa53 	bl	80012c0 <action_image_info>
				break;
 8001e1a:	e7be      	b.n	8001d9a <main+0x16>
			case IMAGE_DETAIL_STATUS: action_img_detail_status();
 8001e1c:	f7ff faae 	bl	800137c <action_img_detail_status>
				break;
 8001e20:	e7bb      	b.n	8001d9a <main+0x16>
			case HARDWARE_DETAIL_STATUS: action_hw_detail_status();
 8001e22:	f7ff fab0 	bl	8001386 <action_hw_detail_status>
				break;
 8001e26:	e7b8      	b.n	8001d9a <main+0x16>
			case IDLE: action_idle();
 8001e28:	f7fe ff38 	bl	8000c9c <action_idle>
				break;
 8001e2c:	e7b5      	b.n	8001d9a <main+0x16>
			case TEST_PATTERN: action_test_pattern();
 8001e2e:	f7ff fed1 	bl	8001bd4 <action_test_pattern>
				break;
 8001e32:	e7b2      	b.n	8001d9a <main+0x16>
			currline_response(SUCCES);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 fa21 	bl	800227c <currline_response>
 8001e3a:	e7b5      	b.n	8001da8 <main+0x24>
			action_load();
 8001e3c:	f7fe ffd2 	bl	8000de4 <action_load>
 8001e40:	e7b6      	b.n	8001db0 <main+0x2c>
 8001e42:	bf00      	nop
 8001e44:	200010e2 	.word	0x200010e2
 8001e48:	200002e9 	.word	0x200002e9
 8001e4c:	2000031d 	.word	0x2000031d
 8001e50:	200002f0 	.word	0x200002f0

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001e58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e5a:	e003      	b.n	8001e64 <LoopCopyDataInit>

08001e5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e62:	3104      	adds	r1, #4

08001e64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e6c:	d3f6      	bcc.n	8001e5c <CopyDataInit>
  ldr  r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e70:	e002      	b.n	8001e78 <LoopFillZerobss>

08001e72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001e72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e74:	f842 3b04 	str.w	r3, [r2], #4

08001e78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e7c:	d3f9      	bcc.n	8001e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e7e:	f000 f823 	bl	8001ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f000 fa63 	bl	800234c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7ff ff7d 	bl	8001d84 <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e90:	08002658 	.word	0x08002658
  ldr  r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e98:	200002c4 	.word	0x200002c4
  ldr  r2, =_sbss
 8001e9c:	200002c4 	.word	0x200002c4
  ldr  r3, = _ebss
 8001ea0:	2000116c 	.word	0x2000116c

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <SetSysClock>:
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_0WS;
 8001ea8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SetSysClock+0x1c>)
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001eb0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	609a      	str	r2, [r3, #8]
      
  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	609a      	str	r2, [r3, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <SystemInit>:
{
 8001ec8:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eca:	4c10      	ldr	r4, [pc, #64]	; (8001f0c <SystemInit+0x44>)
 8001ecc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <SystemInit+0x48>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001eec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ef0:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <SystemInit+0x4c>)
 8001ef4:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001efc:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8001efe:	60d9      	str	r1, [r3, #12]
  SetSysClock();
 8001f00:	f7ff ffd2 	bl	8001ea8 <SetSysClock>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f08:	60a3      	str	r3, [r4, #8]
 8001f0a:	bd10      	pop	{r4, pc}
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	40023800 	.word	0x40023800
 8001f14:	24003010 	.word	0x24003010

08001f18 <uart_init>:

#include "uart.h"
extern ejac_mode Mode;

void uart_init(void)
{
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	b086      	sub	sp, #24
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);

	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	2010      	movs	r0, #16
 8001f20:	f7fe fb76 	bl	8000610 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001f24:	2101      	movs	r1, #1
 8001f26:	4608      	mov	r0, r1
 8001f28:	f7fe fb64 	bl	80005f4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = UART_TX_PIN | UART_RX_PIN;
 8001f2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f30:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f88d 3014 	strb.w	r3, [sp, #20]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001f38:	2600      	movs	r6, #0
 8001f3a:	f88d 6016 	strb.w	r6, [sp, #22]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001f3e:	2501      	movs	r5, #1
 8001f40:	f88d 5017 	strb.w	r5, [sp, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Medium_Speed;
 8001f44:	f88d 5015 	strb.w	r5, [sp, #21]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	4c1d      	ldr	r4, [pc, #116]	; (8001fc0 <uart_init+0xa8>)
 8001f4a:	a904      	add	r1, sp, #16
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f7fe fa65 	bl	800041c <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 8001f52:	2207      	movs	r2, #7
 8001f54:	2109      	movs	r1, #9
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7fe faae 	bl	80004b8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	210a      	movs	r1, #10
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7fe faa9 	bl	80004b8 <GPIO_PinAFConfig>
	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
	USART_ClearFlag(UART_EJACQUARD, USART_FLAG_TC);
 8001f66:	f5a4 4470 	sub.w	r4, r4, #61440	; 0xf000
 8001f6a:	2140      	movs	r1, #64	; 0x40
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7fe fc19 	bl	80007a4 <USART_ClearFlag>

	USART_InitTypeDef USART_InitStruct;
	USART_InitStruct.USART_BaudRate = 115200;
 8001f72:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f76:	9300      	str	r3, [sp, #0]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001f78:	f8ad 6004 	strh.w	r6, [sp, #4]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8001f7c:	f8ad 6006 	strh.w	r6, [sp, #6]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8001f80:	f8ad 6008 	strh.w	r6, [sp, #8]
	USART_InitStruct.USART_Mode = (USART_Mode_Tx | USART_Mode_Rx);
 8001f84:	230c      	movs	r3, #12
 8001f86:	f8ad 300a 	strh.w	r3, [sp, #10]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001f8a:	f8ad 600c 	strh.w	r6, [sp, #12]
	USART_Init(UART_EJACQUARD, &USART_InitStruct);
 8001f8e:	4669      	mov	r1, sp
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7fe fb65 	bl	8000660 <USART_Init>

	// enable EIE interrupt.
	USART_ITConfig(UART_EJACQUARD, USART_IT_ERR, ENABLE);
 8001f96:	462a      	mov	r2, r5
 8001f98:	2160      	movs	r1, #96	; 0x60
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7fe fbde 	bl	800075c <USART_ITConfig>
	USART_ITConfig(UART_EJACQUARD, USART_IT_RXNE, ENABLE);
 8001fa0:	462a      	mov	r2, r5
 8001fa2:	f240 5125 	movw	r1, #1317	; 0x525
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7fe fbd8 	bl	800075c <USART_ITConfig>
	USART_Cmd(UART_EJACQUARD, ENABLE);
 8001fac:	4629      	mov	r1, r5
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe fbbe 	bl	8000730 <USART_Cmd>
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <uart_init+0xac>)
 8001fb8:	605a      	str	r2, [r3, #4]

	NVIC_EnableIRQ(USART1_IRQn);
}
 8001fba:	b006      	add	sp, #24
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001fc8:	b538      	push	{r3, r4, r5, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fca:	b672      	cpsid	i
	__disable_irq();
#if 1
	uint32_t isr_flags = UART_EJACQUARD->SR;
 8001fcc:	4a21      	ldr	r2, [pc, #132]	; (8002054 <USART1_IRQHandler+0x8c>)
 8001fce:	8813      	ldrh	r3, [r2, #0]
 8001fd0:	b29b      	uxth	r3, r3
	uint32_t cr1_its = UART_EJACQUARD->CR1;
 8001fd2:	8992      	ldrh	r2, [r2, #12]
	uint8_t dummy = dummy;

	    /* If no error occurs */
	error_flags = (isr_flags & (uint32_t) (USART_SR_ORE |  USART_SR_NE | USART_SR_FE |  USART_SR_PE ));

	if (error_flags == RESET)
 8001fd4:	f013 0f0f 	tst.w	r3, #15
 8001fd8:	d11a      	bne.n	8002010 <USART1_IRQHandler+0x48>
 8001fda:	b292      	uxth	r2, r2
	{
		if ( ((isr_flags & USART_SR_RXNE) != RESET) && ((cr1_its & USART_CR1_RXNEIE) != RESET) )    /* Receive Data Ready */
 8001fdc:	f013 0f20 	tst.w	r3, #32
 8001fe0:	d002      	beq.n	8001fe8 <USART1_IRQHandler+0x20>
 8001fe2:	f012 0f20 	tst.w	r2, #32
 8001fe6:	d108      	bne.n	8001ffa <USART1_IRQHandler+0x32>
	       /* If no error on ISR, normal data ready, save into the data buffer. */
	       /* Note: read from RDR will clear the interrupt */
              save_buffer[cmd_count] =  (uint8_t)USART_ReceiveData(UART_EJACQUARD);
	          cmd_count++;
	    }
		if(cmd_count >= PAGE_SIZE)
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <USART1_IRQHandler+0x90>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001ff0:	d31a      	bcc.n	8002028 <USART1_IRQHandler+0x60>
		{
			cmd_count = 0;
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <USART1_IRQHandler+0x90>)
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e016      	b.n	8002028 <USART1_IRQHandler+0x60>
              save_buffer[cmd_count] =  (uint8_t)USART_ReceiveData(UART_EJACQUARD);
 8001ffa:	4c17      	ldr	r4, [pc, #92]	; (8002058 <USART1_IRQHandler+0x90>)
 8001ffc:	6825      	ldr	r5, [r4, #0]
 8001ffe:	4815      	ldr	r0, [pc, #84]	; (8002054 <USART1_IRQHandler+0x8c>)
 8002000:	f7fe fba8 	bl	8000754 <USART_ReceiveData>
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <USART1_IRQHandler+0x94>)
 8002006:	5558      	strb	r0, [r3, r5]
	          cmd_count++;
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	6023      	str	r3, [r4, #0]
 800200e:	e7eb      	b.n	8001fe8 <USART1_IRQHandler+0x20>
		}
	 }
	 else
	 {
			 /* USART frame error interrupt occurred --------------------------------------*/
		 if(((isr_flags & USART_SR_FE) != RESET))
 8002010:	f013 0f02 	tst.w	r3, #2
 8002014:	d10a      	bne.n	800202c <USART1_IRQHandler+0x64>
		 {
			 /*Clear the Frame error Flag*/
			 USART_ClearFlag(UART_EJACQUARD, USART_FLAG_FE);
		 }
		 /* USART noise error interrupt occurred --------------------------------------*/
		 else if(((isr_flags & USART_SR_NE) != RESET) )
 8002016:	f013 0f04 	tst.w	r3, #4
 800201a:	d10c      	bne.n	8002036 <USART1_IRQHandler+0x6e>
		 {
			 /*Clear the noise error Flag*/
			 USART_ClearFlag(UART_EJACQUARD, USART_FLAG_NE);
		 }
		 /* USART Over-Run interrupt occurred -----------------------------------------*/
		 else if(((isr_flags & USART_SR_ORE) != RESET))
 800201c:	f013 0f08 	tst.w	r3, #8
 8002020:	d10e      	bne.n	8002040 <USART1_IRQHandler+0x78>
			 ore_count++;
			 USART_ClearFlag(UART_EJACQUARD, USART_FLAG_ORE);
			 //error_flags = UART_EJACQUARD->SR;

		 }
		 dummy = USART_ReceiveData(UART_EJACQUARD);
 8002022:	480c      	ldr	r0, [pc, #48]	; (8002054 <USART1_IRQHandler+0x8c>)
 8002024:	f7fe fb96 	bl	8000754 <USART_ReceiveData>
  __ASM volatile ("cpsie i" : : : "memory");
 8002028:	b662      	cpsie	i
 800202a:	bd38      	pop	{r3, r4, r5, pc}
			 USART_ClearFlag(UART_EJACQUARD, USART_FLAG_FE);
 800202c:	2102      	movs	r1, #2
 800202e:	4809      	ldr	r0, [pc, #36]	; (8002054 <USART1_IRQHandler+0x8c>)
 8002030:	f7fe fbb8 	bl	80007a4 <USART_ClearFlag>
 8002034:	e7f5      	b.n	8002022 <USART1_IRQHandler+0x5a>
			 USART_ClearFlag(UART_EJACQUARD, USART_FLAG_NE);
 8002036:	2104      	movs	r1, #4
 8002038:	4806      	ldr	r0, [pc, #24]	; (8002054 <USART1_IRQHandler+0x8c>)
 800203a:	f7fe fbb3 	bl	80007a4 <USART_ClearFlag>
 800203e:	e7f0      	b.n	8002022 <USART1_IRQHandler+0x5a>
			 ore_count++;
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <USART1_IRQHandler+0x98>)
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	6013      	str	r3, [r2, #0]
			 USART_ClearFlag(UART_EJACQUARD, USART_FLAG_ORE);
 8002048:	2108      	movs	r1, #8
 800204a:	4802      	ldr	r0, [pc, #8]	; (8002054 <USART1_IRQHandler+0x8c>)
 800204c:	f7fe fbaa 	bl	80007a4 <USART_ClearFlag>
 8002050:	e7e7      	b.n	8002022 <USART1_IRQHandler+0x5a>
 8002052:	bf00      	nop
 8002054:	40011000 	.word	0x40011000
 8002058:	2000111c 	.word	0x2000111c
 800205c:	20000398 	.word	0x20000398
 8002060:	20000f98 	.word	0x20000f98

08002064 <response>:
		action_flag = TEST_PATTERN;
	}
}

void response(ejac_status_type status_code)
{
 8002064:	b530      	push	{r4, r5, lr}
 8002066:	b093      	sub	sp, #76	; 0x4c
	uint8_t count = 0, * resp_ptr;
	ejac_cmd_response_t  resp;
	ejac_cmd_image_config_t config_resp;
	ejac_cmd_hardware_settings_t hw_resp;
	(resp).MagicNumber = MAGIC_NO;
 8002068:	f640 330b 	movw	r3, #2827	; 0xb0b
 800206c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	(resp).Uid = UID;
 8002070:	2301      	movs	r3, #1
 8002072:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
	(resp).Action = action_flag;
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <response+0x12c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	(resp).Status = status_code;
 800207e:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
	if (status_code == SUCCES)
 8002082:	b948      	cbnz	r0, 8002098 <response+0x34>
	{
	    if((action_flag == IMAGE_DETAIL_STATUS))
 8002084:	4b42      	ldr	r3, [pc, #264]	; (8002190 <response+0x12c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b08      	cmp	r3, #8
 800208c:	d015      	beq.n	80020ba <response+0x56>
		{
			uint8_t * config_addr_ptr = (uint8_t *)0x08010000; //CONFIG_ADDR;
			memcpy(&config_resp, config_addr_ptr, CONFIG_RESP_SIZE);
		}
	    else if((action_flag == HARDWARE_DETAIL_STATUS))
 800208e:	4b40      	ldr	r3, [pc, #256]	; (8002190 <response+0x12c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b09      	cmp	r3, #9
 8002096:	d017      	beq.n	80020c8 <response+0x64>
{
 8002098:	ad10      	add	r5, sp, #64	; 0x40
 800209a:	2405      	movs	r4, #5
	    }

	}
	resp_ptr = (uint8_t *)&resp;
	count = SIZE_RESP;
	while(count)
 800209c:	b1fc      	cbz	r4, 80020de <response+0x7a>
	{
		if (USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TXE) == SET)
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	483c      	ldr	r0, [pc, #240]	; (8002194 <response+0x130>)
 80020a2:	f7fe fb78 	bl	8000796 <USART_GetFlagStatus>
 80020a6:	2801      	cmp	r0, #1
 80020a8:	d1f8      	bne.n	800209c <response+0x38>
		{
			USART_SendData(UART_EJACQUARD, (*resp_ptr));
 80020aa:	f815 1b01 	ldrb.w	r1, [r5], #1
 80020ae:	4839      	ldr	r0, [pc, #228]	; (8002194 <response+0x130>)
 80020b0:	f7fe fb4c 	bl	800074c <USART_SendData>
			count--;
 80020b4:	3c01      	subs	r4, #1
 80020b6:	b2e4      	uxtb	r4, r4
 80020b8:	e7f0      	b.n	800209c <response+0x38>
			memcpy(&config_resp, config_addr_ptr, CONFIG_RESP_SIZE);
 80020ba:	ac0b      	add	r4, sp, #44	; 0x2c
 80020bc:	4d36      	ldr	r5, [pc, #216]	; (8002198 <response+0x134>)
 80020be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c2:	682b      	ldr	r3, [r5, #0]
 80020c4:	8023      	strh	r3, [r4, #0]
 80020c6:	e7e7      	b.n	8002098 <response+0x34>
	    	memcpy(&hw_resp, hw_addr_ptr, sizeof(ejac_cmd_hardware_settings_t));
 80020c8:	466c      	mov	r4, sp
 80020ca:	4d34      	ldr	r5, [pc, #208]	; (800219c <response+0x138>)
 80020cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020d8:	c403      	stmia	r4!, {r0, r1}
 80020da:	7022      	strb	r2, [r4, #0]
 80020dc:	e7dc      	b.n	8002098 <response+0x34>
			resp_ptr++;
		}
	}

	 while(USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TC) == SET)
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	482c      	ldr	r0, [pc, #176]	; (8002194 <response+0x130>)
 80020e2:	f7fe fb58 	bl	8000796 <USART_GetFlagStatus>
 80020e6:	2801      	cmp	r0, #1
 80020e8:	d0f9      	beq.n	80020de <response+0x7a>
	 {
		         ;
     }


	if((action_flag == IMAGE_DETAIL_STATUS))
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <response+0x12c>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d01c      	beq.n	800212e <response+0xca>
		while(USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TC) == SET)
		{
			;
		}
	}
	else if((action_flag == HARDWARE_DETAIL_STATUS))
 80020f4:	4b26      	ldr	r3, [pc, #152]	; (8002190 <response+0x12c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b09      	cmp	r3, #9
 80020fc:	d02f      	beq.n	800215e <response+0xfa>
		{
				;
		}
	}

	if ((action_flag != START) && (action_flag != LOAD))
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <response+0x12c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d010      	beq.n	800212a <response+0xc6>
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <response+0x12c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d00b      	beq.n	800212a <response+0xc6>
	{
		action_flag = IDLE;
 8002112:	220b      	movs	r2, #11
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <response+0x12c>)
 8002116:	701a      	strb	r2, [r3, #0]
		//prev_action_flag = IDLE;
		memset(save_buffer, 0, PAGE_SIZE);
 8002118:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800211c:	2100      	movs	r1, #0
 800211e:	4820      	ldr	r0, [pc, #128]	; (80021a0 <response+0x13c>)
 8002120:	f000 f943 	bl	80023aa <memset>
		cmd_count = 0;
 8002124:	2200      	movs	r2, #0
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <response+0x140>)
 8002128:	601a      	str	r2, [r3, #0]
	}
}
 800212a:	b013      	add	sp, #76	; 0x4c
 800212c:	bd30      	pop	{r4, r5, pc}
 800212e:	ad0b      	add	r5, sp, #44	; 0x2c
 8002130:	2412      	movs	r4, #18
		while (count)
 8002132:	b16c      	cbz	r4, 8002150 <response+0xec>
			if (USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TXE) == SET)
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	4817      	ldr	r0, [pc, #92]	; (8002194 <response+0x130>)
 8002138:	f7fe fb2d 	bl	8000796 <USART_GetFlagStatus>
 800213c:	2801      	cmp	r0, #1
 800213e:	d1f8      	bne.n	8002132 <response+0xce>
				USART_SendData(UART_EJACQUARD, (*resp_ptr));
 8002140:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002144:	4813      	ldr	r0, [pc, #76]	; (8002194 <response+0x130>)
 8002146:	f7fe fb01 	bl	800074c <USART_SendData>
				count--;
 800214a:	3c01      	subs	r4, #1
 800214c:	b2e4      	uxtb	r4, r4
 800214e:	e7f0      	b.n	8002132 <response+0xce>
		while(USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TC) == SET)
 8002150:	2140      	movs	r1, #64	; 0x40
 8002152:	4810      	ldr	r0, [pc, #64]	; (8002194 <response+0x130>)
 8002154:	f7fe fb1f 	bl	8000796 <USART_GetFlagStatus>
 8002158:	2801      	cmp	r0, #1
 800215a:	d0f9      	beq.n	8002150 <response+0xec>
 800215c:	e7cf      	b.n	80020fe <response+0x9a>
 800215e:	466d      	mov	r5, sp
 8002160:	2429      	movs	r4, #41	; 0x29
		while (count)
 8002162:	b16c      	cbz	r4, 8002180 <response+0x11c>
			if (USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TXE) == SET)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	480b      	ldr	r0, [pc, #44]	; (8002194 <response+0x130>)
 8002168:	f7fe fb15 	bl	8000796 <USART_GetFlagStatus>
 800216c:	2801      	cmp	r0, #1
 800216e:	d1f8      	bne.n	8002162 <response+0xfe>
				USART_SendData(UART_EJACQUARD, (*resp_ptr));
 8002170:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002174:	4807      	ldr	r0, [pc, #28]	; (8002194 <response+0x130>)
 8002176:	f7fe fae9 	bl	800074c <USART_SendData>
				count--;
 800217a:	3c01      	subs	r4, #1
 800217c:	b2e4      	uxtb	r4, r4
 800217e:	e7f0      	b.n	8002162 <response+0xfe>
		while(USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TC) == SET)
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	4804      	ldr	r0, [pc, #16]	; (8002194 <response+0x130>)
 8002184:	f7fe fb07 	bl	8000796 <USART_GetFlagStatus>
 8002188:	2801      	cmp	r0, #1
 800218a:	d0f9      	beq.n	8002180 <response+0x11c>
 800218c:	e7b7      	b.n	80020fe <response+0x9a>
 800218e:	bf00      	nop
 8002190:	200010e2 	.word	0x200010e2
 8002194:	40011000 	.word	0x40011000
 8002198:	08010000 	.word	0x08010000
 800219c:	0800c000 	.word	0x0800c000
 80021a0:	20000398 	.word	0x20000398
 80021a4:	2000111c 	.word	0x2000111c

080021a8 <sel_action>:
{
 80021a8:	b500      	push	{lr}
 80021aa:	b083      	sub	sp, #12
	memcpy(&cmd, save_buffer, SIZE_CMD);
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <sel_action+0xc0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	9301      	str	r3, [sp, #4]
	if ((cmd.MagicNumber != MAGIC_NO) && (cmd.Uid != UID))
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f640 320b 	movw	r2, #2827	; 0xb0b
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00e      	beq.n	80021da <sel_action+0x32>
 80021bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d00a      	beq.n	80021da <sel_action+0x32>
		cmd_count = 0;
 80021c4:	2100      	movs	r1, #0
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <sel_action+0xc4>)
 80021c8:	6019      	str	r1, [r3, #0]
		memset(save_buffer, 0, PAGE_SIZE);
 80021ca:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80021ce:	4826      	ldr	r0, [pc, #152]	; (8002268 <sel_action+0xc0>)
 80021d0:	f000 f8eb 	bl	80023aa <memset>
		response(FAIL);
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7ff ff45 	bl	8002064 <response>
	if ((cmd.Action == STATUS))
 80021da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021de:	b1ab      	cbz	r3, 800220c <sel_action+0x64>
	else if (cmd.Action == LOAD)
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d019      	beq.n	8002218 <sel_action+0x70>
	else if (cmd.Action == START)
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d01b      	beq.n	8002220 <sel_action+0x78>
	else if ((cmd.Action == STOP) && (buff_len == 0))
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d020      	beq.n	800222e <sel_action+0x86>
	else if (cmd.Action == IMAGE_CONFIG)
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d026      	beq.n	800223e <sel_action+0x96>
	else if (cmd.Action == HARDWARE_CONFIG)
 80021f0:	2b06      	cmp	r3, #6
 80021f2:	d028      	beq.n	8002246 <sel_action+0x9e>
	else if (cmd.Action == IMAGE_INFO)
 80021f4:	2b07      	cmp	r3, #7
 80021f6:	d02a      	beq.n	800224e <sel_action+0xa6>
	else if ((cmd.Action == IMAGE_DETAIL_STATUS))
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d02c      	beq.n	8002256 <sel_action+0xae>
	else if ((cmd.Action == HARDWARE_DETAIL_STATUS))
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d02e      	beq.n	800225e <sel_action+0xb6>
	else if ((cmd.Action == TEST_PATTERN))
 8002200:	2b0d      	cmp	r3, #13
 8002202:	d106      	bne.n	8002212 <sel_action+0x6a>
		action_flag = TEST_PATTERN;
 8002204:	220d      	movs	r2, #13
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <sel_action+0xc8>)
 8002208:	701a      	strb	r2, [r3, #0]
}
 800220a:	e002      	b.n	8002212 <sel_action+0x6a>
		action_flag = STATUS;
 800220c:	2200      	movs	r2, #0
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <sel_action+0xc8>)
 8002210:	701a      	strb	r2, [r3, #0]
}
 8002212:	b003      	add	sp, #12
 8002214:	f85d fb04 	ldr.w	pc, [sp], #4
		action_flag = LOAD;
 8002218:	2201      	movs	r2, #1
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <sel_action+0xc8>)
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e7f8      	b.n	8002212 <sel_action+0x6a>
		action_flag = START;
 8002220:	2202      	movs	r2, #2
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <sel_action+0xc8>)
 8002224:	701a      	strb	r2, [r3, #0]
		Mode = RUNNING;
 8002226:	2200      	movs	r2, #0
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <sel_action+0xcc>)
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e7f1      	b.n	8002212 <sel_action+0x6a>
	else if ((cmd.Action == STOP) && (buff_len == 0))
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <sel_action+0xd0>)
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	2a00      	cmp	r2, #0
 8002234:	d1da      	bne.n	80021ec <sel_action+0x44>
		action_flag = STOP;
 8002236:	2203      	movs	r2, #3
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <sel_action+0xc8>)
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e7e9      	b.n	8002212 <sel_action+0x6a>
		action_flag = IMAGE_CONFIG;
 800223e:	2205      	movs	r2, #5
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <sel_action+0xc8>)
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e7e5      	b.n	8002212 <sel_action+0x6a>
		action_flag = HARDWARE_CONFIG;
 8002246:	2206      	movs	r2, #6
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <sel_action+0xc8>)
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e7e1      	b.n	8002212 <sel_action+0x6a>
		action_flag = IMAGE_INFO;
 800224e:	2207      	movs	r2, #7
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <sel_action+0xc8>)
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e7dd      	b.n	8002212 <sel_action+0x6a>
		action_flag = IMAGE_DETAIL_STATUS;
 8002256:	2208      	movs	r2, #8
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <sel_action+0xc8>)
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e7d9      	b.n	8002212 <sel_action+0x6a>
		action_flag = HARDWARE_DETAIL_STATUS;
 800225e:	2209      	movs	r2, #9
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <sel_action+0xc8>)
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e7d5      	b.n	8002212 <sel_action+0x6a>
 8002266:	bf00      	nop
 8002268:	20000398 	.word	0x20000398
 800226c:	2000111c 	.word	0x2000111c
 8002270:	200010e2 	.word	0x200010e2
 8002274:	2000031d 	.word	0x2000031d
 8002278:	20000350 	.word	0x20000350

0800227c <currline_response>:

void currline_response(ejac_status_type status_code)
{
 800227c:	b530      	push	{r4, r5, lr}
 800227e:	b08b      	sub	sp, #44	; 0x2c
	ejac_cmd_resp_t curr_resp;
	uint8_t * curr_resp_ptr, count = 0;

	curr_resp.CurrLine1 = line_count1;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <currline_response+0x5c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	9301      	str	r3, [sp, #4]
	curr_resp.Itr1 = itr1;
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <currline_response+0x60>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	9302      	str	r3, [sp, #8]
	curr_resp.CurrLine2 = line_count2;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <currline_response+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	9303      	str	r3, [sp, #12]
	curr_resp.Itr2 = itr2;
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <currline_response+0x68>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	9304      	str	r3, [sp, #16]
	/*curr_resp.CurrLine3 = line_count3;
	curr_resp.Itr3 = itr3;
	curr_resp.CurrLine4 = line_count4;
	curr_resp.Itr4 = itr4;*/
	curr_resp.GlobalCurr = g_curr_line;
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <currline_response+0x6c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	9309      	str	r3, [sp, #36]	; 0x24
	curr_resp_ptr = (uint8_t *)&curr_resp;
	count = SIZE_CURR_RESP;
 800229e:	2424      	movs	r4, #36	; 0x24
	curr_resp_ptr = (uint8_t *)&curr_resp;
 80022a0:	ad01      	add	r5, sp, #4

	while(count)
 80022a2:	b16c      	cbz	r4, 80022c0 <currline_response+0x44>
	{
		if (USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TXE) == SET)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	4811      	ldr	r0, [pc, #68]	; (80022ec <currline_response+0x70>)
 80022a8:	f7fe fa75 	bl	8000796 <USART_GetFlagStatus>
 80022ac:	2801      	cmp	r0, #1
 80022ae:	d1f8      	bne.n	80022a2 <currline_response+0x26>
		{
			USART_SendData(UART_EJACQUARD, (*curr_resp_ptr));
 80022b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <currline_response+0x70>)
 80022b6:	f7fe fa49 	bl	800074c <USART_SendData>
			count--;
 80022ba:	3c01      	subs	r4, #1
 80022bc:	b2e4      	uxtb	r4, r4
 80022be:	e7f0      	b.n	80022a2 <currline_response+0x26>
			curr_resp_ptr++;
		}
	}

	 while(USART_GetFlagStatus(UART_EJACQUARD, USART_FLAG_TC) == SET)
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	480a      	ldr	r0, [pc, #40]	; (80022ec <currline_response+0x70>)
 80022c4:	f7fe fa67 	bl	8000796 <USART_GetFlagStatus>
 80022c8:	2801      	cmp	r0, #1
 80022ca:	d0f9      	beq.n	80022c0 <currline_response+0x44>
	 {
		         ;
	 }

	feed_next_data = 0;
 80022cc:	2200      	movs	r2, #0
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <currline_response+0x74>)
 80022d0:	701a      	strb	r2, [r3, #0]
}
 80022d2:	b00b      	add	sp, #44	; 0x2c
 80022d4:	bd30      	pop	{r4, r5, pc}
 80022d6:	bf00      	nop
 80022d8:	20001140 	.word	0x20001140
 80022dc:	20001118 	.word	0x20001118
 80022e0:	20001114 	.word	0x20001114
 80022e4:	20001110 	.word	0x20001110
 80022e8:	20001160 	.word	0x20001160
 80022ec:	40011000 	.word	0x40011000
 80022f0:	200002e9 	.word	0x200002e9

080022f4 <erase_flash>:

ejac_status_type erase_flash(void)
{
 80022f4:	b508      	push	{r3, lr}
	FlashState state;
	state = flash_sector_erase(FLASH_Sector_5);
 80022f6:	2028      	movs	r0, #40	; 0x28
 80022f8:	f7fe fcbe 	bl	8000c78 <flash_sector_erase>
	if(state == FLASH_FAIL)
 80022fc:	2801      	cmp	r0, #1
 80022fe:	d101      	bne.n	8002304 <erase_flash+0x10>
	{
		return(FAIL_FLASH);
 8002300:	2003      	movs	r0, #3
 8002302:	bd08      	pop	{r3, pc}
	}
	state = flash_sector_erase(FLASH_Sector_6);
 8002304:	2030      	movs	r0, #48	; 0x30
 8002306:	f7fe fcb7 	bl	8000c78 <flash_sector_erase>
	if(state == FLASH_FAIL)
 800230a:	2801      	cmp	r0, #1
 800230c:	d101      	bne.n	8002312 <erase_flash+0x1e>
	{
		return(FAIL_FLASH);
 800230e:	2003      	movs	r0, #3
 8002310:	bd08      	pop	{r3, pc}
	}
	state = flash_sector_erase(FLASH_Sector_7);
 8002312:	2038      	movs	r0, #56	; 0x38
 8002314:	f7fe fcb0 	bl	8000c78 <flash_sector_erase>
	if(state == FLASH_FAIL)
 8002318:	2801      	cmp	r0, #1
 800231a:	d101      	bne.n	8002320 <erase_flash+0x2c>
	{
		return(FAIL_FLASH);
 800231c:	2003      	movs	r0, #3
 800231e:	bd08      	pop	{r3, pc}
	}
	state = flash_sector_erase(FLASH_Sector_8);
 8002320:	2040      	movs	r0, #64	; 0x40
 8002322:	f7fe fca9 	bl	8000c78 <flash_sector_erase>
	if(state == FLASH_FAIL)
 8002326:	2801      	cmp	r0, #1
 8002328:	d101      	bne.n	800232e <erase_flash+0x3a>
	{
		return(FAIL_FLASH);
 800232a:	2003      	movs	r0, #3
 800232c:	bd08      	pop	{r3, pc}
	}
	state = flash_sector_erase(FLASH_Sector_9);
 800232e:	2048      	movs	r0, #72	; 0x48
 8002330:	f7fe fca2 	bl	8000c78 <flash_sector_erase>
	if(state == FLASH_FAIL)
 8002334:	2801      	cmp	r0, #1
 8002336:	d003      	beq.n	8002340 <erase_flash+0x4c>
	{
		return(FAIL_FLASH);
	}
	if(state == FLASH_PASS)
 8002338:	b108      	cbz	r0, 800233e <erase_flash+0x4a>
	{
		return(SUCCES);
	}
	else
	{
		return(FAIL_FLASH);
 800233a:	2003      	movs	r0, #3
	}

}
 800233c:	bd08      	pop	{r3, pc}
 800233e:	bd08      	pop	{r3, pc}
		return(FAIL_FLASH);
 8002340:	2003      	movs	r0, #3
 8002342:	bd08      	pop	{r3, pc}

08002344 <atoi>:
 8002344:	220a      	movs	r2, #10
 8002346:	2100      	movs	r1, #0
 8002348:	f000 b8b8 	b.w	80024bc <strtol>

0800234c <__libc_init_array>:
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	4e0d      	ldr	r6, [pc, #52]	; (8002384 <__libc_init_array+0x38>)
 8002350:	4c0d      	ldr	r4, [pc, #52]	; (8002388 <__libc_init_array+0x3c>)
 8002352:	1ba4      	subs	r4, r4, r6
 8002354:	10a4      	asrs	r4, r4, #2
 8002356:	2500      	movs	r5, #0
 8002358:	42a5      	cmp	r5, r4
 800235a:	d109      	bne.n	8002370 <__libc_init_array+0x24>
 800235c:	4e0b      	ldr	r6, [pc, #44]	; (800238c <__libc_init_array+0x40>)
 800235e:	4c0c      	ldr	r4, [pc, #48]	; (8002390 <__libc_init_array+0x44>)
 8002360:	f000 f8e4 	bl	800252c <_init>
 8002364:	1ba4      	subs	r4, r4, r6
 8002366:	10a4      	asrs	r4, r4, #2
 8002368:	2500      	movs	r5, #0
 800236a:	42a5      	cmp	r5, r4
 800236c:	d105      	bne.n	800237a <__libc_init_array+0x2e>
 800236e:	bd70      	pop	{r4, r5, r6, pc}
 8002370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002374:	4798      	blx	r3
 8002376:	3501      	adds	r5, #1
 8002378:	e7ee      	b.n	8002358 <__libc_init_array+0xc>
 800237a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800237e:	4798      	blx	r3
 8002380:	3501      	adds	r5, #1
 8002382:	e7f2      	b.n	800236a <__libc_init_array+0x1e>
 8002384:	08002650 	.word	0x08002650
 8002388:	08002650 	.word	0x08002650
 800238c:	08002650 	.word	0x08002650
 8002390:	08002654 	.word	0x08002654

08002394 <memcpy>:
 8002394:	b510      	push	{r4, lr}
 8002396:	1e43      	subs	r3, r0, #1
 8002398:	440a      	add	r2, r1
 800239a:	4291      	cmp	r1, r2
 800239c:	d100      	bne.n	80023a0 <memcpy+0xc>
 800239e:	bd10      	pop	{r4, pc}
 80023a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023a8:	e7f7      	b.n	800239a <memcpy+0x6>

080023aa <memset>:
 80023aa:	4402      	add	r2, r0
 80023ac:	4603      	mov	r3, r0
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d100      	bne.n	80023b4 <memset+0xa>
 80023b2:	4770      	bx	lr
 80023b4:	f803 1b01 	strb.w	r1, [r3], #1
 80023b8:	e7f9      	b.n	80023ae <memset+0x4>

080023ba <_strtol_l.isra.0>:
 80023ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023be:	4680      	mov	r8, r0
 80023c0:	4689      	mov	r9, r1
 80023c2:	4692      	mov	sl, r2
 80023c4:	461f      	mov	r7, r3
 80023c6:	468b      	mov	fp, r1
 80023c8:	465d      	mov	r5, fp
 80023ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80023cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023d0:	f000 f88a 	bl	80024e8 <__locale_ctype_ptr_l>
 80023d4:	4420      	add	r0, r4
 80023d6:	7846      	ldrb	r6, [r0, #1]
 80023d8:	f016 0608 	ands.w	r6, r6, #8
 80023dc:	d10b      	bne.n	80023f6 <_strtol_l.isra.0+0x3c>
 80023de:	2c2d      	cmp	r4, #45	; 0x2d
 80023e0:	d10b      	bne.n	80023fa <_strtol_l.isra.0+0x40>
 80023e2:	782c      	ldrb	r4, [r5, #0]
 80023e4:	2601      	movs	r6, #1
 80023e6:	f10b 0502 	add.w	r5, fp, #2
 80023ea:	b167      	cbz	r7, 8002406 <_strtol_l.isra.0+0x4c>
 80023ec:	2f10      	cmp	r7, #16
 80023ee:	d114      	bne.n	800241a <_strtol_l.isra.0+0x60>
 80023f0:	2c30      	cmp	r4, #48	; 0x30
 80023f2:	d00a      	beq.n	800240a <_strtol_l.isra.0+0x50>
 80023f4:	e011      	b.n	800241a <_strtol_l.isra.0+0x60>
 80023f6:	46ab      	mov	fp, r5
 80023f8:	e7e6      	b.n	80023c8 <_strtol_l.isra.0+0xe>
 80023fa:	2c2b      	cmp	r4, #43	; 0x2b
 80023fc:	bf04      	itt	eq
 80023fe:	782c      	ldrbeq	r4, [r5, #0]
 8002400:	f10b 0502 	addeq.w	r5, fp, #2
 8002404:	e7f1      	b.n	80023ea <_strtol_l.isra.0+0x30>
 8002406:	2c30      	cmp	r4, #48	; 0x30
 8002408:	d127      	bne.n	800245a <_strtol_l.isra.0+0xa0>
 800240a:	782b      	ldrb	r3, [r5, #0]
 800240c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002410:	2b58      	cmp	r3, #88	; 0x58
 8002412:	d14b      	bne.n	80024ac <_strtol_l.isra.0+0xf2>
 8002414:	786c      	ldrb	r4, [r5, #1]
 8002416:	2710      	movs	r7, #16
 8002418:	3502      	adds	r5, #2
 800241a:	2e00      	cmp	r6, #0
 800241c:	bf0c      	ite	eq
 800241e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002422:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002426:	2200      	movs	r2, #0
 8002428:	fbb1 fef7 	udiv	lr, r1, r7
 800242c:	4610      	mov	r0, r2
 800242e:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002432:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002436:	2b09      	cmp	r3, #9
 8002438:	d811      	bhi.n	800245e <_strtol_l.isra.0+0xa4>
 800243a:	461c      	mov	r4, r3
 800243c:	42a7      	cmp	r7, r4
 800243e:	dd1d      	ble.n	800247c <_strtol_l.isra.0+0xc2>
 8002440:	1c53      	adds	r3, r2, #1
 8002442:	d007      	beq.n	8002454 <_strtol_l.isra.0+0x9a>
 8002444:	4586      	cmp	lr, r0
 8002446:	d316      	bcc.n	8002476 <_strtol_l.isra.0+0xbc>
 8002448:	d101      	bne.n	800244e <_strtol_l.isra.0+0x94>
 800244a:	45a4      	cmp	ip, r4
 800244c:	db13      	blt.n	8002476 <_strtol_l.isra.0+0xbc>
 800244e:	fb00 4007 	mla	r0, r0, r7, r4
 8002452:	2201      	movs	r2, #1
 8002454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002458:	e7eb      	b.n	8002432 <_strtol_l.isra.0+0x78>
 800245a:	270a      	movs	r7, #10
 800245c:	e7dd      	b.n	800241a <_strtol_l.isra.0+0x60>
 800245e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002462:	2b19      	cmp	r3, #25
 8002464:	d801      	bhi.n	800246a <_strtol_l.isra.0+0xb0>
 8002466:	3c37      	subs	r4, #55	; 0x37
 8002468:	e7e8      	b.n	800243c <_strtol_l.isra.0+0x82>
 800246a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800246e:	2b19      	cmp	r3, #25
 8002470:	d804      	bhi.n	800247c <_strtol_l.isra.0+0xc2>
 8002472:	3c57      	subs	r4, #87	; 0x57
 8002474:	e7e2      	b.n	800243c <_strtol_l.isra.0+0x82>
 8002476:	f04f 32ff 	mov.w	r2, #4294967295
 800247a:	e7eb      	b.n	8002454 <_strtol_l.isra.0+0x9a>
 800247c:	1c53      	adds	r3, r2, #1
 800247e:	d108      	bne.n	8002492 <_strtol_l.isra.0+0xd8>
 8002480:	2322      	movs	r3, #34	; 0x22
 8002482:	f8c8 3000 	str.w	r3, [r8]
 8002486:	4608      	mov	r0, r1
 8002488:	f1ba 0f00 	cmp.w	sl, #0
 800248c:	d107      	bne.n	800249e <_strtol_l.isra.0+0xe4>
 800248e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002492:	b106      	cbz	r6, 8002496 <_strtol_l.isra.0+0xdc>
 8002494:	4240      	negs	r0, r0
 8002496:	f1ba 0f00 	cmp.w	sl, #0
 800249a:	d00c      	beq.n	80024b6 <_strtol_l.isra.0+0xfc>
 800249c:	b122      	cbz	r2, 80024a8 <_strtol_l.isra.0+0xee>
 800249e:	3d01      	subs	r5, #1
 80024a0:	f8ca 5000 	str.w	r5, [sl]
 80024a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a8:	464d      	mov	r5, r9
 80024aa:	e7f9      	b.n	80024a0 <_strtol_l.isra.0+0xe6>
 80024ac:	2430      	movs	r4, #48	; 0x30
 80024ae:	2f00      	cmp	r7, #0
 80024b0:	d1b3      	bne.n	800241a <_strtol_l.isra.0+0x60>
 80024b2:	2708      	movs	r7, #8
 80024b4:	e7b1      	b.n	800241a <_strtol_l.isra.0+0x60>
 80024b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080024bc <strtol>:
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <strtol+0x24>)
 80024be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024c0:	681c      	ldr	r4, [r3, #0]
 80024c2:	4d08      	ldr	r5, [pc, #32]	; (80024e4 <strtol+0x28>)
 80024c4:	6a23      	ldr	r3, [r4, #32]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bf08      	it	eq
 80024ca:	462b      	moveq	r3, r5
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	460a      	mov	r2, r1
 80024d2:	4601      	mov	r1, r0
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff ff70 	bl	80023ba <_strtol_l.isra.0>
 80024da:	b003      	add	sp, #12
 80024dc:	bd30      	pop	{r4, r5, pc}
 80024de:	bf00      	nop
 80024e0:	200000f4 	.word	0x200000f4
 80024e4:	20000158 	.word	0x20000158

080024e8 <__locale_ctype_ptr_l>:
 80024e8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80024ec:	4770      	bx	lr

080024ee <__ascii_mbtowc>:
 80024ee:	b082      	sub	sp, #8
 80024f0:	b901      	cbnz	r1, 80024f4 <__ascii_mbtowc+0x6>
 80024f2:	a901      	add	r1, sp, #4
 80024f4:	b142      	cbz	r2, 8002508 <__ascii_mbtowc+0x1a>
 80024f6:	b14b      	cbz	r3, 800250c <__ascii_mbtowc+0x1e>
 80024f8:	7813      	ldrb	r3, [r2, #0]
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	1c10      	adds	r0, r2, #0
 8002500:	bf18      	it	ne
 8002502:	2001      	movne	r0, #1
 8002504:	b002      	add	sp, #8
 8002506:	4770      	bx	lr
 8002508:	4610      	mov	r0, r2
 800250a:	e7fb      	b.n	8002504 <__ascii_mbtowc+0x16>
 800250c:	f06f 0001 	mvn.w	r0, #1
 8002510:	e7f8      	b.n	8002504 <__ascii_mbtowc+0x16>

08002512 <__ascii_wctomb>:
 8002512:	b149      	cbz	r1, 8002528 <__ascii_wctomb+0x16>
 8002514:	2aff      	cmp	r2, #255	; 0xff
 8002516:	bf85      	ittet	hi
 8002518:	238a      	movhi	r3, #138	; 0x8a
 800251a:	6003      	strhi	r3, [r0, #0]
 800251c:	700a      	strbls	r2, [r1, #0]
 800251e:	f04f 30ff 	movhi.w	r0, #4294967295
 8002522:	bf98      	it	ls
 8002524:	2001      	movls	r0, #1
 8002526:	4770      	bx	lr
 8002528:	4608      	mov	r0, r1
 800252a:	4770      	bx	lr

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
